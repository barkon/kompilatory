Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> if_else_instr
Rule 7     instruction -> while_instr
Rule 8     instruction -> for_instr
Rule 9     instruction -> break_instr
Rule 10    instruction -> continue_instr
Rule 11    instruction -> return_instr
Rule 12    instruction -> print_instr
Rule 13    instruction -> instr_block
Rule 14    instruction -> assignment ;
Rule 15    if_else_instr -> IF ( expression ) instruction
Rule 16    if_else_instr -> IF ( expression ) instruction ELSE instruction
Rule 17    if_else_instr -> IF ( error ) instruction
Rule 18    if_else_instr -> IF ( error ) instruction ELSE instruction
Rule 19    while_instr -> WHILE ( expression ) instruction
Rule 20    while_instr -> WHILE ( error ) instruction
Rule 21    for_instr -> FOR for_init instruction
Rule 22    for_init -> ID = expression : expression
Rule 23    break_instr -> BREAK ;
Rule 24    continue_instr -> CONTINUE ;
Rule 25    return_instr -> RETURN expression ;
Rule 26    print_instr -> PRINT print_vars ;
Rule 27    print_instr -> PRINT error ;
Rule 28    print_vars -> print_vars , print_var
Rule 29    print_vars -> print_var
Rule 30    print_var -> STRING
Rule 31    print_var -> expression
Rule 32    instr_block -> { instructions }
Rule 33    number -> INT
Rule 34    number -> FLOAT
Rule 35    lvalue -> ID
Rule 36    lvalue -> ID [ INT ]
Rule 37    lvalue -> ID [ INT , INT ]
Rule 38    assignment -> lvalue assign_op expression
Rule 39    assign_op -> =
Rule 40    assign_op -> PLUSASSIGN
Rule 41    assign_op -> MINUSASSIGN
Rule 42    assign_op -> MULASSIGN
Rule 43    assign_op -> DIVASSIGN
Rule 44    expression -> number
Rule 45    expression -> lvalue
Rule 46    expression -> matrix_init
Rule 47    expression -> ( expression )
Rule 48    expression -> - expression
Rule 49    expression -> expression '
Rule 50    expression -> expression < expression
Rule 51    expression -> expression > expression
Rule 52    expression -> expression EQ expression
Rule 53    expression -> expression NEQ expression
Rule 54    expression -> expression LESSEQ expression
Rule 55    expression -> expression MOREEQ expression
Rule 56    expression -> expression + expression
Rule 57    expression -> expression - expression
Rule 58    expression -> expression * expression
Rule 59    expression -> expression / expression
Rule 60    expression -> expression DOTPLUS expression
Rule 61    expression -> expression DOTMINUS expression
Rule 62    expression -> expression DOTMUL expression
Rule 63    expression -> expression DOTDIV expression
Rule 64    matrix_init -> eye
Rule 65    matrix_init -> ones
Rule 66    matrix_init -> zeros
Rule 67    matrix_init -> [ matrix_rows ]
Rule 68    matrix_init -> [ scopes ]
Rule 69    eye -> EYE ( INT )
Rule 70    ones -> ONES ( INT )
Rule 71    zeros -> ZEROS ( INT )
Rule 72    matrix_rows -> matrix_rows ; row_elems
Rule 73    matrix_rows -> row_elems
Rule 74    row_elems -> row_elems , number
Rule 75    row_elems -> number
Rule 76    scopes -> scope
Rule 77    scopes -> scopes ; scope
Rule 78    scope -> INT : INT
Rule 79    scope -> number : number : number

Terminals, with rules where they appear

'                    : 49
(                    : 15 16 17 18 19 20 47 69 70 71
)                    : 15 16 17 18 19 20 47 69 70 71
*                    : 58
+                    : 56
,                    : 28 37 74
-                    : 48 57
/                    : 59
:                    : 22 78 79 79
;                    : 14 23 24 25 26 27 72 77
<                    : 50
=                    : 22 39
>                    : 51
BREAK                : 23
CONTINUE             : 24
DIVASSIGN            : 43
DOTDIV               : 63
DOTMINUS             : 61
DOTMUL               : 62
DOTPLUS              : 60
ELSE                 : 16 18
EQ                   : 52
EYE                  : 69
FLOAT                : 34
FOR                  : 21
ID                   : 22 35 36 37
IF                   : 15 16 17 18
INT                  : 33 36 37 37 69 70 71 78 78
LESSEQ               : 54
MINUSASSIGN          : 41
MOREEQ               : 55
MULASSIGN            : 42
NEQ                  : 53
ONES                 : 70
PLUSASSIGN           : 40
PRINT                : 26 27
RETURN               : 25
STRING               : 30
WHILE                : 19 20
ZEROS                : 71
[                    : 36 37 67 68
]                    : 36 37 67 68
error                : 17 18 20 27
{                    : 32
}                    : 32

Nonterminals, with rules where they appear

assign_op            : 38
assignment           : 14
break_instr          : 9
continue_instr       : 10
expression           : 15 16 19 22 22 25 31 38 47 48 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63
eye                  : 64
for_init             : 21
for_instr            : 8
if_else_instr        : 6
instr_block          : 13
instruction          : 4 5 15 16 16 17 18 18 19 20 21
instructions         : 2 4 32
instructions_opt     : 1
lvalue               : 38 45
matrix_init          : 46
matrix_rows          : 67 72
number               : 44 74 75 79 79 79
ones                 : 65
print_instr          : 12
print_var            : 28 29
print_vars           : 26 28
program              : 0
return_instr         : 11
row_elems            : 72 73 74
scope                : 76 77
scopes               : 68 77
while_instr          : 7
zeros                : 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    $end            reduce using rule 3 (instructions_opt -> .)
    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    instructions                   shift and go to state 16
    program                        shift and go to state 6
    instructions_opt               shift and go to state 18
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    break_instr                    shift and go to state 4
    instruction                    shift and go to state 21
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 1

    (14) instruction -> assignment . ;

    ;               shift and go to state 24


state 2

    (23) break_instr -> BREAK . ;

    ;               shift and go to state 25


state 3

    (24) continue_instr -> CONTINUE . ;

    ;               shift and go to state 26


state 4

    (9) instruction -> break_instr .

    IF              reduce using rule 9 (instruction -> break_instr .)
    WHILE           reduce using rule 9 (instruction -> break_instr .)
    FOR             reduce using rule 9 (instruction -> break_instr .)
    BREAK           reduce using rule 9 (instruction -> break_instr .)
    CONTINUE        reduce using rule 9 (instruction -> break_instr .)
    RETURN          reduce using rule 9 (instruction -> break_instr .)
    PRINT           reduce using rule 9 (instruction -> break_instr .)
    {               reduce using rule 9 (instruction -> break_instr .)
    ID              reduce using rule 9 (instruction -> break_instr .)
    $end            reduce using rule 9 (instruction -> break_instr .)
    }               reduce using rule 9 (instruction -> break_instr .)
    ELSE            reduce using rule 9 (instruction -> break_instr .)


state 5

    (15) if_else_instr -> IF . ( expression ) instruction
    (16) if_else_instr -> IF . ( expression ) instruction ELSE instruction
    (17) if_else_instr -> IF . ( error ) instruction
    (18) if_else_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 27


state 6

    (0) S' -> program .



state 7

    (38) assignment -> lvalue . assign_op expression
    (39) assign_op -> . =
    (40) assign_op -> . PLUSASSIGN
    (41) assign_op -> . MINUSASSIGN
    (42) assign_op -> . MULASSIGN
    (43) assign_op -> . DIVASSIGN

    =               shift and go to state 32
    PLUSASSIGN      shift and go to state 30
    MINUSASSIGN     shift and go to state 28
    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 33

    assign_op                      shift and go to state 31

state 8

    (11) instruction -> return_instr .

    IF              reduce using rule 11 (instruction -> return_instr .)
    WHILE           reduce using rule 11 (instruction -> return_instr .)
    FOR             reduce using rule 11 (instruction -> return_instr .)
    BREAK           reduce using rule 11 (instruction -> return_instr .)
    CONTINUE        reduce using rule 11 (instruction -> return_instr .)
    RETURN          reduce using rule 11 (instruction -> return_instr .)
    PRINT           reduce using rule 11 (instruction -> return_instr .)
    {               reduce using rule 11 (instruction -> return_instr .)
    ID              reduce using rule 11 (instruction -> return_instr .)
    $end            reduce using rule 11 (instruction -> return_instr .)
    }               reduce using rule 11 (instruction -> return_instr .)
    ELSE            reduce using rule 11 (instruction -> return_instr .)


state 9

    (6) instruction -> if_else_instr .

    IF              reduce using rule 6 (instruction -> if_else_instr .)
    WHILE           reduce using rule 6 (instruction -> if_else_instr .)
    FOR             reduce using rule 6 (instruction -> if_else_instr .)
    BREAK           reduce using rule 6 (instruction -> if_else_instr .)
    CONTINUE        reduce using rule 6 (instruction -> if_else_instr .)
    RETURN          reduce using rule 6 (instruction -> if_else_instr .)
    PRINT           reduce using rule 6 (instruction -> if_else_instr .)
    {               reduce using rule 6 (instruction -> if_else_instr .)
    ID              reduce using rule 6 (instruction -> if_else_instr .)
    $end            reduce using rule 6 (instruction -> if_else_instr .)
    }               reduce using rule 6 (instruction -> if_else_instr .)
    ELSE            reduce using rule 6 (instruction -> if_else_instr .)


state 10

    (19) while_instr -> WHILE . ( expression ) instruction
    (20) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 34


state 11

    (35) lvalue -> ID .
    (36) lvalue -> ID . [ INT ]
    (37) lvalue -> ID . [ INT , INT ]

    =               reduce using rule 35 (lvalue -> ID .)
    PLUSASSIGN      reduce using rule 35 (lvalue -> ID .)
    MINUSASSIGN     reduce using rule 35 (lvalue -> ID .)
    MULASSIGN       reduce using rule 35 (lvalue -> ID .)
    DIVASSIGN       reduce using rule 35 (lvalue -> ID .)
    '               reduce using rule 35 (lvalue -> ID .)
    <               reduce using rule 35 (lvalue -> ID .)
    >               reduce using rule 35 (lvalue -> ID .)
    EQ              reduce using rule 35 (lvalue -> ID .)
    NEQ             reduce using rule 35 (lvalue -> ID .)
    LESSEQ          reduce using rule 35 (lvalue -> ID .)
    MOREEQ          reduce using rule 35 (lvalue -> ID .)
    +               reduce using rule 35 (lvalue -> ID .)
    -               reduce using rule 35 (lvalue -> ID .)
    *               reduce using rule 35 (lvalue -> ID .)
    /               reduce using rule 35 (lvalue -> ID .)
    DOTPLUS         reduce using rule 35 (lvalue -> ID .)
    DOTMINUS        reduce using rule 35 (lvalue -> ID .)
    DOTMUL          reduce using rule 35 (lvalue -> ID .)
    DOTDIV          reduce using rule 35 (lvalue -> ID .)
    ;               reduce using rule 35 (lvalue -> ID .)
    ,               reduce using rule 35 (lvalue -> ID .)
    )               reduce using rule 35 (lvalue -> ID .)
    :               reduce using rule 35 (lvalue -> ID .)
    IF              reduce using rule 35 (lvalue -> ID .)
    WHILE           reduce using rule 35 (lvalue -> ID .)
    FOR             reduce using rule 35 (lvalue -> ID .)
    BREAK           reduce using rule 35 (lvalue -> ID .)
    CONTINUE        reduce using rule 35 (lvalue -> ID .)
    RETURN          reduce using rule 35 (lvalue -> ID .)
    PRINT           reduce using rule 35 (lvalue -> ID .)
    {               reduce using rule 35 (lvalue -> ID .)
    ID              reduce using rule 35 (lvalue -> ID .)
    [               shift and go to state 35


state 12

    (8) instruction -> for_instr .

    IF              reduce using rule 8 (instruction -> for_instr .)
    WHILE           reduce using rule 8 (instruction -> for_instr .)
    FOR             reduce using rule 8 (instruction -> for_instr .)
    BREAK           reduce using rule 8 (instruction -> for_instr .)
    CONTINUE        reduce using rule 8 (instruction -> for_instr .)
    RETURN          reduce using rule 8 (instruction -> for_instr .)
    PRINT           reduce using rule 8 (instruction -> for_instr .)
    {               reduce using rule 8 (instruction -> for_instr .)
    ID              reduce using rule 8 (instruction -> for_instr .)
    $end            reduce using rule 8 (instruction -> for_instr .)
    }               reduce using rule 8 (instruction -> for_instr .)
    ELSE            reduce using rule 8 (instruction -> for_instr .)


state 13

    (26) print_instr -> PRINT . print_vars ;
    (27) print_instr -> PRINT . error ;
    (28) print_vars -> . print_vars , print_var
    (29) print_vars -> . print_var
    (30) print_var -> . STRING
    (31) print_var -> . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    error           shift and go to state 50
    STRING          shift and go to state 51
    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 45
    zeros                          shift and go to state 47
    eye                            shift and go to state 41
    print_vars                     shift and go to state 36
    print_var                      shift and go to state 53
    ones                           shift and go to state 54

state 14

    (32) instr_block -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    instructions                   shift and go to state 55
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    break_instr                    shift and go to state 4
    instruction                    shift and go to state 21
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 15

    (21) for_instr -> FOR . for_init instruction
    (22) for_init -> . ID = expression : expression

    ID              shift and go to state 56

    for_init                       shift and go to state 57

state 16

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    break_instr                    shift and go to state 4
    instruction                    shift and go to state 58
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 17

    (10) instruction -> continue_instr .

    IF              reduce using rule 10 (instruction -> continue_instr .)
    WHILE           reduce using rule 10 (instruction -> continue_instr .)
    FOR             reduce using rule 10 (instruction -> continue_instr .)
    BREAK           reduce using rule 10 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 10 (instruction -> continue_instr .)
    RETURN          reduce using rule 10 (instruction -> continue_instr .)
    PRINT           reduce using rule 10 (instruction -> continue_instr .)
    {               reduce using rule 10 (instruction -> continue_instr .)
    ID              reduce using rule 10 (instruction -> continue_instr .)
    $end            reduce using rule 10 (instruction -> continue_instr .)
    }               reduce using rule 10 (instruction -> continue_instr .)
    ELSE            reduce using rule 10 (instruction -> continue_instr .)


state 18

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 19

    (7) instruction -> while_instr .

    IF              reduce using rule 7 (instruction -> while_instr .)
    WHILE           reduce using rule 7 (instruction -> while_instr .)
    FOR             reduce using rule 7 (instruction -> while_instr .)
    BREAK           reduce using rule 7 (instruction -> while_instr .)
    CONTINUE        reduce using rule 7 (instruction -> while_instr .)
    RETURN          reduce using rule 7 (instruction -> while_instr .)
    PRINT           reduce using rule 7 (instruction -> while_instr .)
    {               reduce using rule 7 (instruction -> while_instr .)
    ID              reduce using rule 7 (instruction -> while_instr .)
    $end            reduce using rule 7 (instruction -> while_instr .)
    }               reduce using rule 7 (instruction -> while_instr .)
    ELSE            reduce using rule 7 (instruction -> while_instr .)


state 20

    (12) instruction -> print_instr .

    IF              reduce using rule 12 (instruction -> print_instr .)
    WHILE           reduce using rule 12 (instruction -> print_instr .)
    FOR             reduce using rule 12 (instruction -> print_instr .)
    BREAK           reduce using rule 12 (instruction -> print_instr .)
    CONTINUE        reduce using rule 12 (instruction -> print_instr .)
    RETURN          reduce using rule 12 (instruction -> print_instr .)
    PRINT           reduce using rule 12 (instruction -> print_instr .)
    {               reduce using rule 12 (instruction -> print_instr .)
    ID              reduce using rule 12 (instruction -> print_instr .)
    $end            reduce using rule 12 (instruction -> print_instr .)
    }               reduce using rule 12 (instruction -> print_instr .)
    ELSE            reduce using rule 12 (instruction -> print_instr .)


state 21

    (5) instructions -> instruction .

    }               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    {               reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)


state 22

    (13) instruction -> instr_block .

    IF              reduce using rule 13 (instruction -> instr_block .)
    WHILE           reduce using rule 13 (instruction -> instr_block .)
    FOR             reduce using rule 13 (instruction -> instr_block .)
    BREAK           reduce using rule 13 (instruction -> instr_block .)
    CONTINUE        reduce using rule 13 (instruction -> instr_block .)
    RETURN          reduce using rule 13 (instruction -> instr_block .)
    PRINT           reduce using rule 13 (instruction -> instr_block .)
    {               reduce using rule 13 (instruction -> instr_block .)
    ID              reduce using rule 13 (instruction -> instr_block .)
    $end            reduce using rule 13 (instruction -> instr_block .)
    }               reduce using rule 13 (instruction -> instr_block .)
    ELSE            reduce using rule 13 (instruction -> instr_block .)


state 23

    (25) return_instr -> RETURN . expression ;
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 59
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 24

    (14) instruction -> assignment ; .

    IF              reduce using rule 14 (instruction -> assignment ; .)
    WHILE           reduce using rule 14 (instruction -> assignment ; .)
    FOR             reduce using rule 14 (instruction -> assignment ; .)
    BREAK           reduce using rule 14 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 14 (instruction -> assignment ; .)
    RETURN          reduce using rule 14 (instruction -> assignment ; .)
    PRINT           reduce using rule 14 (instruction -> assignment ; .)
    {               reduce using rule 14 (instruction -> assignment ; .)
    ID              reduce using rule 14 (instruction -> assignment ; .)
    $end            reduce using rule 14 (instruction -> assignment ; .)
    }               reduce using rule 14 (instruction -> assignment ; .)
    ELSE            reduce using rule 14 (instruction -> assignment ; .)


state 25

    (23) break_instr -> BREAK ; .

    IF              reduce using rule 23 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 23 (break_instr -> BREAK ; .)
    FOR             reduce using rule 23 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 23 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 23 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 23 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 23 (break_instr -> BREAK ; .)
    {               reduce using rule 23 (break_instr -> BREAK ; .)
    ID              reduce using rule 23 (break_instr -> BREAK ; .)
    $end            reduce using rule 23 (break_instr -> BREAK ; .)
    }               reduce using rule 23 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 23 (break_instr -> BREAK ; .)


state 26

    (24) continue_instr -> CONTINUE ; .

    IF              reduce using rule 24 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 24 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 24 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 24 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 24 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 24 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 24 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 24 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 24 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 24 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 24 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 24 (continue_instr -> CONTINUE ; .)


state 27

    (15) if_else_instr -> IF ( . expression ) instruction
    (16) if_else_instr -> IF ( . expression ) instruction ELSE instruction
    (17) if_else_instr -> IF ( . error ) instruction
    (18) if_else_instr -> IF ( . error ) instruction ELSE instruction
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    error           shift and go to state 61
    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 60
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 28

    (41) assign_op -> MINUSASSIGN .

    (               reduce using rule 41 (assign_op -> MINUSASSIGN .)
    -               reduce using rule 41 (assign_op -> MINUSASSIGN .)
    INT             reduce using rule 41 (assign_op -> MINUSASSIGN .)
    FLOAT           reduce using rule 41 (assign_op -> MINUSASSIGN .)
    ID              reduce using rule 41 (assign_op -> MINUSASSIGN .)
    [               reduce using rule 41 (assign_op -> MINUSASSIGN .)
    EYE             reduce using rule 41 (assign_op -> MINUSASSIGN .)
    ONES            reduce using rule 41 (assign_op -> MINUSASSIGN .)
    ZEROS           reduce using rule 41 (assign_op -> MINUSASSIGN .)


state 29

    (42) assign_op -> MULASSIGN .

    (               reduce using rule 42 (assign_op -> MULASSIGN .)
    -               reduce using rule 42 (assign_op -> MULASSIGN .)
    INT             reduce using rule 42 (assign_op -> MULASSIGN .)
    FLOAT           reduce using rule 42 (assign_op -> MULASSIGN .)
    ID              reduce using rule 42 (assign_op -> MULASSIGN .)
    [               reduce using rule 42 (assign_op -> MULASSIGN .)
    EYE             reduce using rule 42 (assign_op -> MULASSIGN .)
    ONES            reduce using rule 42 (assign_op -> MULASSIGN .)
    ZEROS           reduce using rule 42 (assign_op -> MULASSIGN .)


state 30

    (40) assign_op -> PLUSASSIGN .

    (               reduce using rule 40 (assign_op -> PLUSASSIGN .)
    -               reduce using rule 40 (assign_op -> PLUSASSIGN .)
    INT             reduce using rule 40 (assign_op -> PLUSASSIGN .)
    FLOAT           reduce using rule 40 (assign_op -> PLUSASSIGN .)
    ID              reduce using rule 40 (assign_op -> PLUSASSIGN .)
    [               reduce using rule 40 (assign_op -> PLUSASSIGN .)
    EYE             reduce using rule 40 (assign_op -> PLUSASSIGN .)
    ONES            reduce using rule 40 (assign_op -> PLUSASSIGN .)
    ZEROS           reduce using rule 40 (assign_op -> PLUSASSIGN .)


state 31

    (38) assignment -> lvalue assign_op . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 62
    zeros                          shift and go to state 47
    eye                            shift and go to state 41
    ones                           shift and go to state 54

state 32

    (39) assign_op -> = .

    (               reduce using rule 39 (assign_op -> = .)
    -               reduce using rule 39 (assign_op -> = .)
    INT             reduce using rule 39 (assign_op -> = .)
    FLOAT           reduce using rule 39 (assign_op -> = .)
    ID              reduce using rule 39 (assign_op -> = .)
    [               reduce using rule 39 (assign_op -> = .)
    EYE             reduce using rule 39 (assign_op -> = .)
    ONES            reduce using rule 39 (assign_op -> = .)
    ZEROS           reduce using rule 39 (assign_op -> = .)


state 33

    (43) assign_op -> DIVASSIGN .

    (               reduce using rule 43 (assign_op -> DIVASSIGN .)
    -               reduce using rule 43 (assign_op -> DIVASSIGN .)
    INT             reduce using rule 43 (assign_op -> DIVASSIGN .)
    FLOAT           reduce using rule 43 (assign_op -> DIVASSIGN .)
    ID              reduce using rule 43 (assign_op -> DIVASSIGN .)
    [               reduce using rule 43 (assign_op -> DIVASSIGN .)
    EYE             reduce using rule 43 (assign_op -> DIVASSIGN .)
    ONES            reduce using rule 43 (assign_op -> DIVASSIGN .)
    ZEROS           reduce using rule 43 (assign_op -> DIVASSIGN .)


state 34

    (19) while_instr -> WHILE ( . expression ) instruction
    (20) while_instr -> WHILE ( . error ) instruction
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    error           shift and go to state 64
    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 63
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 35

    (36) lvalue -> ID [ . INT ]
    (37) lvalue -> ID [ . INT , INT ]

    INT             shift and go to state 65


state 36

    (26) print_instr -> PRINT print_vars . ;
    (28) print_vars -> print_vars . , print_var

    ;               shift and go to state 66
    ,               shift and go to state 67


state 37

    (47) expression -> ( . expression )
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 68
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 38

    (34) number -> FLOAT .

    '               reduce using rule 34 (number -> FLOAT .)
    <               reduce using rule 34 (number -> FLOAT .)
    >               reduce using rule 34 (number -> FLOAT .)
    EQ              reduce using rule 34 (number -> FLOAT .)
    NEQ             reduce using rule 34 (number -> FLOAT .)
    LESSEQ          reduce using rule 34 (number -> FLOAT .)
    MOREEQ          reduce using rule 34 (number -> FLOAT .)
    +               reduce using rule 34 (number -> FLOAT .)
    -               reduce using rule 34 (number -> FLOAT .)
    *               reduce using rule 34 (number -> FLOAT .)
    /               reduce using rule 34 (number -> FLOAT .)
    DOTPLUS         reduce using rule 34 (number -> FLOAT .)
    DOTMINUS        reduce using rule 34 (number -> FLOAT .)
    DOTMUL          reduce using rule 34 (number -> FLOAT .)
    DOTDIV          reduce using rule 34 (number -> FLOAT .)
    ;               reduce using rule 34 (number -> FLOAT .)
    ,               reduce using rule 34 (number -> FLOAT .)
    )               reduce using rule 34 (number -> FLOAT .)
    :               reduce using rule 34 (number -> FLOAT .)
    IF              reduce using rule 34 (number -> FLOAT .)
    WHILE           reduce using rule 34 (number -> FLOAT .)
    FOR             reduce using rule 34 (number -> FLOAT .)
    BREAK           reduce using rule 34 (number -> FLOAT .)
    CONTINUE        reduce using rule 34 (number -> FLOAT .)
    RETURN          reduce using rule 34 (number -> FLOAT .)
    PRINT           reduce using rule 34 (number -> FLOAT .)
    {               reduce using rule 34 (number -> FLOAT .)
    ID              reduce using rule 34 (number -> FLOAT .)
    ]               reduce using rule 34 (number -> FLOAT .)


state 39

    (45) expression -> lvalue .

    ;               reduce using rule 45 (expression -> lvalue .)
    '               reduce using rule 45 (expression -> lvalue .)
    <               reduce using rule 45 (expression -> lvalue .)
    >               reduce using rule 45 (expression -> lvalue .)
    EQ              reduce using rule 45 (expression -> lvalue .)
    NEQ             reduce using rule 45 (expression -> lvalue .)
    LESSEQ          reduce using rule 45 (expression -> lvalue .)
    MOREEQ          reduce using rule 45 (expression -> lvalue .)
    +               reduce using rule 45 (expression -> lvalue .)
    -               reduce using rule 45 (expression -> lvalue .)
    *               reduce using rule 45 (expression -> lvalue .)
    /               reduce using rule 45 (expression -> lvalue .)
    DOTPLUS         reduce using rule 45 (expression -> lvalue .)
    DOTMINUS        reduce using rule 45 (expression -> lvalue .)
    DOTMUL          reduce using rule 45 (expression -> lvalue .)
    DOTDIV          reduce using rule 45 (expression -> lvalue .)
    ,               reduce using rule 45 (expression -> lvalue .)
    )               reduce using rule 45 (expression -> lvalue .)
    :               reduce using rule 45 (expression -> lvalue .)
    IF              reduce using rule 45 (expression -> lvalue .)
    WHILE           reduce using rule 45 (expression -> lvalue .)
    FOR             reduce using rule 45 (expression -> lvalue .)
    BREAK           reduce using rule 45 (expression -> lvalue .)
    CONTINUE        reduce using rule 45 (expression -> lvalue .)
    RETURN          reduce using rule 45 (expression -> lvalue .)
    PRINT           reduce using rule 45 (expression -> lvalue .)
    {               reduce using rule 45 (expression -> lvalue .)
    ID              reduce using rule 45 (expression -> lvalue .)


state 40

    (70) ones -> ONES . ( INT )

    (               shift and go to state 69


state 41

    (64) matrix_init -> eye .

    '               reduce using rule 64 (matrix_init -> eye .)
    <               reduce using rule 64 (matrix_init -> eye .)
    >               reduce using rule 64 (matrix_init -> eye .)
    EQ              reduce using rule 64 (matrix_init -> eye .)
    NEQ             reduce using rule 64 (matrix_init -> eye .)
    LESSEQ          reduce using rule 64 (matrix_init -> eye .)
    MOREEQ          reduce using rule 64 (matrix_init -> eye .)
    +               reduce using rule 64 (matrix_init -> eye .)
    -               reduce using rule 64 (matrix_init -> eye .)
    *               reduce using rule 64 (matrix_init -> eye .)
    /               reduce using rule 64 (matrix_init -> eye .)
    DOTPLUS         reduce using rule 64 (matrix_init -> eye .)
    DOTMINUS        reduce using rule 64 (matrix_init -> eye .)
    DOTMUL          reduce using rule 64 (matrix_init -> eye .)
    DOTDIV          reduce using rule 64 (matrix_init -> eye .)
    ;               reduce using rule 64 (matrix_init -> eye .)
    ,               reduce using rule 64 (matrix_init -> eye .)
    )               reduce using rule 64 (matrix_init -> eye .)
    :               reduce using rule 64 (matrix_init -> eye .)
    IF              reduce using rule 64 (matrix_init -> eye .)
    WHILE           reduce using rule 64 (matrix_init -> eye .)
    FOR             reduce using rule 64 (matrix_init -> eye .)
    BREAK           reduce using rule 64 (matrix_init -> eye .)
    CONTINUE        reduce using rule 64 (matrix_init -> eye .)
    RETURN          reduce using rule 64 (matrix_init -> eye .)
    PRINT           reduce using rule 64 (matrix_init -> eye .)
    {               reduce using rule 64 (matrix_init -> eye .)
    ID              reduce using rule 64 (matrix_init -> eye .)


state 42

    (48) expression -> - . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 70
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 43

    (67) matrix_init -> [ . matrix_rows ]
    (68) matrix_init -> [ . scopes ]
    (72) matrix_rows -> . matrix_rows ; row_elems
    (73) matrix_rows -> . row_elems
    (76) scopes -> . scope
    (77) scopes -> . scopes ; scope
    (74) row_elems -> . row_elems , number
    (75) row_elems -> . number
    (78) scope -> . INT : INT
    (79) scope -> . number : number : number
    (33) number -> . INT
    (34) number -> . FLOAT

    INT             shift and go to state 72
    FLOAT           shift and go to state 38

    matrix_rows                    shift and go to state 71
    number                         shift and go to state 75
    scope                          shift and go to state 74
    row_elems                      shift and go to state 76
    scopes                         shift and go to state 73

state 44

    (46) expression -> matrix_init .

    ;               reduce using rule 46 (expression -> matrix_init .)
    '               reduce using rule 46 (expression -> matrix_init .)
    <               reduce using rule 46 (expression -> matrix_init .)
    >               reduce using rule 46 (expression -> matrix_init .)
    EQ              reduce using rule 46 (expression -> matrix_init .)
    NEQ             reduce using rule 46 (expression -> matrix_init .)
    LESSEQ          reduce using rule 46 (expression -> matrix_init .)
    MOREEQ          reduce using rule 46 (expression -> matrix_init .)
    +               reduce using rule 46 (expression -> matrix_init .)
    -               reduce using rule 46 (expression -> matrix_init .)
    *               reduce using rule 46 (expression -> matrix_init .)
    /               reduce using rule 46 (expression -> matrix_init .)
    DOTPLUS         reduce using rule 46 (expression -> matrix_init .)
    DOTMINUS        reduce using rule 46 (expression -> matrix_init .)
    DOTMUL          reduce using rule 46 (expression -> matrix_init .)
    DOTDIV          reduce using rule 46 (expression -> matrix_init .)
    ,               reduce using rule 46 (expression -> matrix_init .)
    )               reduce using rule 46 (expression -> matrix_init .)
    :               reduce using rule 46 (expression -> matrix_init .)
    IF              reduce using rule 46 (expression -> matrix_init .)
    WHILE           reduce using rule 46 (expression -> matrix_init .)
    FOR             reduce using rule 46 (expression -> matrix_init .)
    BREAK           reduce using rule 46 (expression -> matrix_init .)
    CONTINUE        reduce using rule 46 (expression -> matrix_init .)
    RETURN          reduce using rule 46 (expression -> matrix_init .)
    PRINT           reduce using rule 46 (expression -> matrix_init .)
    {               reduce using rule 46 (expression -> matrix_init .)
    ID              reduce using rule 46 (expression -> matrix_init .)


state 45

    (31) print_var -> expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 31 (print_var -> expression .)
    ,               reduce using rule 31 (print_var -> expression .)
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 46

    (69) eye -> EYE . ( INT )

    (               shift and go to state 92


state 47

    (66) matrix_init -> zeros .

    '               reduce using rule 66 (matrix_init -> zeros .)
    <               reduce using rule 66 (matrix_init -> zeros .)
    >               reduce using rule 66 (matrix_init -> zeros .)
    EQ              reduce using rule 66 (matrix_init -> zeros .)
    NEQ             reduce using rule 66 (matrix_init -> zeros .)
    LESSEQ          reduce using rule 66 (matrix_init -> zeros .)
    MOREEQ          reduce using rule 66 (matrix_init -> zeros .)
    +               reduce using rule 66 (matrix_init -> zeros .)
    -               reduce using rule 66 (matrix_init -> zeros .)
    *               reduce using rule 66 (matrix_init -> zeros .)
    /               reduce using rule 66 (matrix_init -> zeros .)
    DOTPLUS         reduce using rule 66 (matrix_init -> zeros .)
    DOTMINUS        reduce using rule 66 (matrix_init -> zeros .)
    DOTMUL          reduce using rule 66 (matrix_init -> zeros .)
    DOTDIV          reduce using rule 66 (matrix_init -> zeros .)
    ;               reduce using rule 66 (matrix_init -> zeros .)
    ,               reduce using rule 66 (matrix_init -> zeros .)
    )               reduce using rule 66 (matrix_init -> zeros .)
    :               reduce using rule 66 (matrix_init -> zeros .)
    IF              reduce using rule 66 (matrix_init -> zeros .)
    WHILE           reduce using rule 66 (matrix_init -> zeros .)
    FOR             reduce using rule 66 (matrix_init -> zeros .)
    BREAK           reduce using rule 66 (matrix_init -> zeros .)
    CONTINUE        reduce using rule 66 (matrix_init -> zeros .)
    RETURN          reduce using rule 66 (matrix_init -> zeros .)
    PRINT           reduce using rule 66 (matrix_init -> zeros .)
    {               reduce using rule 66 (matrix_init -> zeros .)
    ID              reduce using rule 66 (matrix_init -> zeros .)


state 48

    (33) number -> INT .

    '               reduce using rule 33 (number -> INT .)
    <               reduce using rule 33 (number -> INT .)
    >               reduce using rule 33 (number -> INT .)
    EQ              reduce using rule 33 (number -> INT .)
    NEQ             reduce using rule 33 (number -> INT .)
    LESSEQ          reduce using rule 33 (number -> INT .)
    MOREEQ          reduce using rule 33 (number -> INT .)
    +               reduce using rule 33 (number -> INT .)
    -               reduce using rule 33 (number -> INT .)
    *               reduce using rule 33 (number -> INT .)
    /               reduce using rule 33 (number -> INT .)
    DOTPLUS         reduce using rule 33 (number -> INT .)
    DOTMINUS        reduce using rule 33 (number -> INT .)
    DOTMUL          reduce using rule 33 (number -> INT .)
    DOTDIV          reduce using rule 33 (number -> INT .)
    ;               reduce using rule 33 (number -> INT .)
    ,               reduce using rule 33 (number -> INT .)
    )               reduce using rule 33 (number -> INT .)
    :               reduce using rule 33 (number -> INT .)
    IF              reduce using rule 33 (number -> INT .)
    WHILE           reduce using rule 33 (number -> INT .)
    FOR             reduce using rule 33 (number -> INT .)
    BREAK           reduce using rule 33 (number -> INT .)
    CONTINUE        reduce using rule 33 (number -> INT .)
    RETURN          reduce using rule 33 (number -> INT .)
    PRINT           reduce using rule 33 (number -> INT .)
    {               reduce using rule 33 (number -> INT .)
    ID              reduce using rule 33 (number -> INT .)
    ]               reduce using rule 33 (number -> INT .)


state 49

    (44) expression -> number .

    ;               reduce using rule 44 (expression -> number .)
    '               reduce using rule 44 (expression -> number .)
    <               reduce using rule 44 (expression -> number .)
    >               reduce using rule 44 (expression -> number .)
    EQ              reduce using rule 44 (expression -> number .)
    NEQ             reduce using rule 44 (expression -> number .)
    LESSEQ          reduce using rule 44 (expression -> number .)
    MOREEQ          reduce using rule 44 (expression -> number .)
    +               reduce using rule 44 (expression -> number .)
    -               reduce using rule 44 (expression -> number .)
    *               reduce using rule 44 (expression -> number .)
    /               reduce using rule 44 (expression -> number .)
    DOTPLUS         reduce using rule 44 (expression -> number .)
    DOTMINUS        reduce using rule 44 (expression -> number .)
    DOTMUL          reduce using rule 44 (expression -> number .)
    DOTDIV          reduce using rule 44 (expression -> number .)
    ,               reduce using rule 44 (expression -> number .)
    )               reduce using rule 44 (expression -> number .)
    :               reduce using rule 44 (expression -> number .)
    IF              reduce using rule 44 (expression -> number .)
    WHILE           reduce using rule 44 (expression -> number .)
    FOR             reduce using rule 44 (expression -> number .)
    BREAK           reduce using rule 44 (expression -> number .)
    CONTINUE        reduce using rule 44 (expression -> number .)
    RETURN          reduce using rule 44 (expression -> number .)
    PRINT           reduce using rule 44 (expression -> number .)
    {               reduce using rule 44 (expression -> number .)
    ID              reduce using rule 44 (expression -> number .)


state 50

    (27) print_instr -> PRINT error . ;

    ;               shift and go to state 93


state 51

    (30) print_var -> STRING .

    ;               reduce using rule 30 (print_var -> STRING .)
    ,               reduce using rule 30 (print_var -> STRING .)


state 52

    (71) zeros -> ZEROS . ( INT )

    (               shift and go to state 94


state 53

    (29) print_vars -> print_var .

    ;               reduce using rule 29 (print_vars -> print_var .)
    ,               reduce using rule 29 (print_vars -> print_var .)


state 54

    (65) matrix_init -> ones .

    '               reduce using rule 65 (matrix_init -> ones .)
    <               reduce using rule 65 (matrix_init -> ones .)
    >               reduce using rule 65 (matrix_init -> ones .)
    EQ              reduce using rule 65 (matrix_init -> ones .)
    NEQ             reduce using rule 65 (matrix_init -> ones .)
    LESSEQ          reduce using rule 65 (matrix_init -> ones .)
    MOREEQ          reduce using rule 65 (matrix_init -> ones .)
    +               reduce using rule 65 (matrix_init -> ones .)
    -               reduce using rule 65 (matrix_init -> ones .)
    *               reduce using rule 65 (matrix_init -> ones .)
    /               reduce using rule 65 (matrix_init -> ones .)
    DOTPLUS         reduce using rule 65 (matrix_init -> ones .)
    DOTMINUS        reduce using rule 65 (matrix_init -> ones .)
    DOTMUL          reduce using rule 65 (matrix_init -> ones .)
    DOTDIV          reduce using rule 65 (matrix_init -> ones .)
    ;               reduce using rule 65 (matrix_init -> ones .)
    ,               reduce using rule 65 (matrix_init -> ones .)
    )               reduce using rule 65 (matrix_init -> ones .)
    :               reduce using rule 65 (matrix_init -> ones .)
    IF              reduce using rule 65 (matrix_init -> ones .)
    WHILE           reduce using rule 65 (matrix_init -> ones .)
    FOR             reduce using rule 65 (matrix_init -> ones .)
    BREAK           reduce using rule 65 (matrix_init -> ones .)
    CONTINUE        reduce using rule 65 (matrix_init -> ones .)
    RETURN          reduce using rule 65 (matrix_init -> ones .)
    PRINT           reduce using rule 65 (matrix_init -> ones .)
    {               reduce using rule 65 (matrix_init -> ones .)
    ID              reduce using rule 65 (matrix_init -> ones .)


state 55

    (32) instr_block -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    }               shift and go to state 95
    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    break_instr                    shift and go to state 4
    instruction                    shift and go to state 58
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 56

    (22) for_init -> ID . = expression : expression

    =               shift and go to state 96


state 57

    (21) for_instr -> FOR for_init . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 97
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 58

    (4) instructions -> instructions instruction .

    }               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    {               reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)


state 59

    (25) return_instr -> RETURN expression . ;
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               shift and go to state 98
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 60

    (15) if_else_instr -> IF ( expression . ) instruction
    (16) if_else_instr -> IF ( expression . ) instruction ELSE instruction
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    )               shift and go to state 99
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 61

    (17) if_else_instr -> IF ( error . ) instruction
    (18) if_else_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 100


state 62

    (38) assignment -> lvalue assign_op expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 38 (assignment -> lvalue assign_op expression .)
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 63

    (19) while_instr -> WHILE ( expression . ) instruction
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    )               shift and go to state 101
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 64

    (20) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 102


state 65

    (36) lvalue -> ID [ INT . ]
    (37) lvalue -> ID [ INT . , INT ]

    ]               shift and go to state 103
    ,               shift and go to state 104


state 66

    (26) print_instr -> PRINT print_vars ; .

    IF              reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    WHILE           reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    FOR             reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    BREAK           reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    CONTINUE        reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    RETURN          reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    PRINT           reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    {               reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    ID              reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    $end            reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    }               reduce using rule 26 (print_instr -> PRINT print_vars ; .)
    ELSE            reduce using rule 26 (print_instr -> PRINT print_vars ; .)


state 67

    (28) print_vars -> print_vars , . print_var
    (30) print_var -> . STRING
    (31) print_var -> . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    STRING          shift and go to state 51
    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 45
    zeros                          shift and go to state 47
    eye                            shift and go to state 41
    print_var                      shift and go to state 105
    ones                           shift and go to state 54

state 68

    (47) expression -> ( expression . )
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    )               shift and go to state 106
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 69

    (70) ones -> ONES ( . INT )

    INT             shift and go to state 107


state 70

    (48) expression -> - expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 48 (expression -> - expression .)
    '               reduce using rule 48 (expression -> - expression .)
    <               reduce using rule 48 (expression -> - expression .)
    >               reduce using rule 48 (expression -> - expression .)
    EQ              reduce using rule 48 (expression -> - expression .)
    NEQ             reduce using rule 48 (expression -> - expression .)
    LESSEQ          reduce using rule 48 (expression -> - expression .)
    MOREEQ          reduce using rule 48 (expression -> - expression .)
    +               reduce using rule 48 (expression -> - expression .)
    -               reduce using rule 48 (expression -> - expression .)
    *               reduce using rule 48 (expression -> - expression .)
    /               reduce using rule 48 (expression -> - expression .)
    ,               reduce using rule 48 (expression -> - expression .)
    )               reduce using rule 48 (expression -> - expression .)
    :               reduce using rule 48 (expression -> - expression .)
    IF              reduce using rule 48 (expression -> - expression .)
    WHILE           reduce using rule 48 (expression -> - expression .)
    FOR             reduce using rule 48 (expression -> - expression .)
    BREAK           reduce using rule 48 (expression -> - expression .)
    CONTINUE        reduce using rule 48 (expression -> - expression .)
    RETURN          reduce using rule 48 (expression -> - expression .)
    PRINT           reduce using rule 48 (expression -> - expression .)
    {               reduce using rule 48 (expression -> - expression .)
    ID              reduce using rule 48 (expression -> - expression .)
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! DOTPLUS         [ reduce using rule 48 (expression -> - expression .) ]
  ! DOTMINUS        [ reduce using rule 48 (expression -> - expression .) ]
  ! DOTMUL          [ reduce using rule 48 (expression -> - expression .) ]
  ! DOTDIV          [ reduce using rule 48 (expression -> - expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]


state 71

    (67) matrix_init -> [ matrix_rows . ]
    (72) matrix_rows -> matrix_rows . ; row_elems

    ]               shift and go to state 108
    ;               shift and go to state 109


state 72

    (78) scope -> INT . : INT
    (33) number -> INT .

  ! shift/reduce conflict for : resolved as shift
    :               shift and go to state 110
    ,               reduce using rule 33 (number -> INT .)
    ]               reduce using rule 33 (number -> INT .)
    ;               reduce using rule 33 (number -> INT .)

  ! :               [ reduce using rule 33 (number -> INT .) ]


state 73

    (68) matrix_init -> [ scopes . ]
    (77) scopes -> scopes . ; scope

    ]               shift and go to state 111
    ;               shift and go to state 112


state 74

    (76) scopes -> scope .

    ]               reduce using rule 76 (scopes -> scope .)
    ;               reduce using rule 76 (scopes -> scope .)


state 75

    (75) row_elems -> number .
    (79) scope -> number . : number : number

    ,               reduce using rule 75 (row_elems -> number .)
    ]               reduce using rule 75 (row_elems -> number .)
    ;               reduce using rule 75 (row_elems -> number .)
    :               shift and go to state 113


state 76

    (73) matrix_rows -> row_elems .
    (74) row_elems -> row_elems . , number

    ]               reduce using rule 73 (matrix_rows -> row_elems .)
    ;               reduce using rule 73 (matrix_rows -> row_elems .)
    ,               shift and go to state 114


state 77

    (58) expression -> expression * . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 115
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 78

    (56) expression -> expression + . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 116
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 79

    (55) expression -> expression MOREEQ . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 117
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 80

    (60) expression -> expression DOTPLUS . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 118
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 81

    (50) expression -> expression < . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 119
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 82

    (53) expression -> expression NEQ . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 120
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 83

    (59) expression -> expression / . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 121
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 84

    (63) expression -> expression DOTDIV . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 122
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 85

    (62) expression -> expression DOTMUL . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 123
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 86

    (49) expression -> expression ' .

    ;               reduce using rule 49 (expression -> expression ' .)
    '               reduce using rule 49 (expression -> expression ' .)
    <               reduce using rule 49 (expression -> expression ' .)
    >               reduce using rule 49 (expression -> expression ' .)
    EQ              reduce using rule 49 (expression -> expression ' .)
    NEQ             reduce using rule 49 (expression -> expression ' .)
    LESSEQ          reduce using rule 49 (expression -> expression ' .)
    MOREEQ          reduce using rule 49 (expression -> expression ' .)
    +               reduce using rule 49 (expression -> expression ' .)
    -               reduce using rule 49 (expression -> expression ' .)
    *               reduce using rule 49 (expression -> expression ' .)
    /               reduce using rule 49 (expression -> expression ' .)
    DOTPLUS         reduce using rule 49 (expression -> expression ' .)
    DOTMINUS        reduce using rule 49 (expression -> expression ' .)
    DOTMUL          reduce using rule 49 (expression -> expression ' .)
    DOTDIV          reduce using rule 49 (expression -> expression ' .)
    ,               reduce using rule 49 (expression -> expression ' .)
    )               reduce using rule 49 (expression -> expression ' .)
    :               reduce using rule 49 (expression -> expression ' .)
    IF              reduce using rule 49 (expression -> expression ' .)
    WHILE           reduce using rule 49 (expression -> expression ' .)
    FOR             reduce using rule 49 (expression -> expression ' .)
    BREAK           reduce using rule 49 (expression -> expression ' .)
    CONTINUE        reduce using rule 49 (expression -> expression ' .)
    RETURN          reduce using rule 49 (expression -> expression ' .)
    PRINT           reduce using rule 49 (expression -> expression ' .)
    {               reduce using rule 49 (expression -> expression ' .)
    ID              reduce using rule 49 (expression -> expression ' .)


state 87

    (61) expression -> expression DOTMINUS . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 124
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 88

    (52) expression -> expression EQ . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 125
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 89

    (51) expression -> expression > . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 126
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 90

    (57) expression -> expression - . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 127
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 91

    (54) expression -> expression LESSEQ . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 128
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 92

    (69) eye -> EYE ( . INT )

    INT             shift and go to state 129


state 93

    (27) print_instr -> PRINT error ; .

    IF              reduce using rule 27 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 27 (print_instr -> PRINT error ; .)
    FOR             reduce using rule 27 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 27 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 27 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 27 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 27 (print_instr -> PRINT error ; .)
    {               reduce using rule 27 (print_instr -> PRINT error ; .)
    ID              reduce using rule 27 (print_instr -> PRINT error ; .)
    $end            reduce using rule 27 (print_instr -> PRINT error ; .)
    }               reduce using rule 27 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 27 (print_instr -> PRINT error ; .)


state 94

    (71) zeros -> ZEROS ( . INT )

    INT             shift and go to state 130


state 95

    (32) instr_block -> { instructions } .

    IF              reduce using rule 32 (instr_block -> { instructions } .)
    WHILE           reduce using rule 32 (instr_block -> { instructions } .)
    FOR             reduce using rule 32 (instr_block -> { instructions } .)
    BREAK           reduce using rule 32 (instr_block -> { instructions } .)
    CONTINUE        reduce using rule 32 (instr_block -> { instructions } .)
    RETURN          reduce using rule 32 (instr_block -> { instructions } .)
    PRINT           reduce using rule 32 (instr_block -> { instructions } .)
    {               reduce using rule 32 (instr_block -> { instructions } .)
    ID              reduce using rule 32 (instr_block -> { instructions } .)
    $end            reduce using rule 32 (instr_block -> { instructions } .)
    }               reduce using rule 32 (instr_block -> { instructions } .)
    ELSE            reduce using rule 32 (instr_block -> { instructions } .)


state 96

    (22) for_init -> ID = . expression : expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 131
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 97

    (21) for_instr -> FOR for_init instruction .

    IF              reduce using rule 21 (for_instr -> FOR for_init instruction .)
    WHILE           reduce using rule 21 (for_instr -> FOR for_init instruction .)
    FOR             reduce using rule 21 (for_instr -> FOR for_init instruction .)
    BREAK           reduce using rule 21 (for_instr -> FOR for_init instruction .)
    CONTINUE        reduce using rule 21 (for_instr -> FOR for_init instruction .)
    RETURN          reduce using rule 21 (for_instr -> FOR for_init instruction .)
    PRINT           reduce using rule 21 (for_instr -> FOR for_init instruction .)
    {               reduce using rule 21 (for_instr -> FOR for_init instruction .)
    ID              reduce using rule 21 (for_instr -> FOR for_init instruction .)
    $end            reduce using rule 21 (for_instr -> FOR for_init instruction .)
    }               reduce using rule 21 (for_instr -> FOR for_init instruction .)
    ELSE            reduce using rule 21 (for_instr -> FOR for_init instruction .)


state 98

    (25) return_instr -> RETURN expression ; .

    IF              reduce using rule 25 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 25 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 25 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 25 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 25 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 25 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 25 (return_instr -> RETURN expression ; .)
    {               reduce using rule 25 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 25 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 25 (return_instr -> RETURN expression ; .)
    }               reduce using rule 25 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 25 (return_instr -> RETURN expression ; .)


state 99

    (15) if_else_instr -> IF ( expression ) . instruction
    (16) if_else_instr -> IF ( expression ) . instruction ELSE instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 132
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 100

    (17) if_else_instr -> IF ( error ) . instruction
    (18) if_else_instr -> IF ( error ) . instruction ELSE instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 133
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 101

    (19) while_instr -> WHILE ( expression ) . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 134
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 102

    (20) while_instr -> WHILE ( error ) . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 135
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 103

    (36) lvalue -> ID [ INT ] .

    =               reduce using rule 36 (lvalue -> ID [ INT ] .)
    PLUSASSIGN      reduce using rule 36 (lvalue -> ID [ INT ] .)
    MINUSASSIGN     reduce using rule 36 (lvalue -> ID [ INT ] .)
    MULASSIGN       reduce using rule 36 (lvalue -> ID [ INT ] .)
    DIVASSIGN       reduce using rule 36 (lvalue -> ID [ INT ] .)
    '               reduce using rule 36 (lvalue -> ID [ INT ] .)
    <               reduce using rule 36 (lvalue -> ID [ INT ] .)
    >               reduce using rule 36 (lvalue -> ID [ INT ] .)
    EQ              reduce using rule 36 (lvalue -> ID [ INT ] .)
    NEQ             reduce using rule 36 (lvalue -> ID [ INT ] .)
    LESSEQ          reduce using rule 36 (lvalue -> ID [ INT ] .)
    MOREEQ          reduce using rule 36 (lvalue -> ID [ INT ] .)
    +               reduce using rule 36 (lvalue -> ID [ INT ] .)
    -               reduce using rule 36 (lvalue -> ID [ INT ] .)
    *               reduce using rule 36 (lvalue -> ID [ INT ] .)
    /               reduce using rule 36 (lvalue -> ID [ INT ] .)
    DOTPLUS         reduce using rule 36 (lvalue -> ID [ INT ] .)
    DOTMINUS        reduce using rule 36 (lvalue -> ID [ INT ] .)
    DOTMUL          reduce using rule 36 (lvalue -> ID [ INT ] .)
    DOTDIV          reduce using rule 36 (lvalue -> ID [ INT ] .)
    ;               reduce using rule 36 (lvalue -> ID [ INT ] .)
    ,               reduce using rule 36 (lvalue -> ID [ INT ] .)
    )               reduce using rule 36 (lvalue -> ID [ INT ] .)
    :               reduce using rule 36 (lvalue -> ID [ INT ] .)
    IF              reduce using rule 36 (lvalue -> ID [ INT ] .)
    WHILE           reduce using rule 36 (lvalue -> ID [ INT ] .)
    FOR             reduce using rule 36 (lvalue -> ID [ INT ] .)
    BREAK           reduce using rule 36 (lvalue -> ID [ INT ] .)
    CONTINUE        reduce using rule 36 (lvalue -> ID [ INT ] .)
    RETURN          reduce using rule 36 (lvalue -> ID [ INT ] .)
    PRINT           reduce using rule 36 (lvalue -> ID [ INT ] .)
    {               reduce using rule 36 (lvalue -> ID [ INT ] .)
    ID              reduce using rule 36 (lvalue -> ID [ INT ] .)


state 104

    (37) lvalue -> ID [ INT , . INT ]

    INT             shift and go to state 136


state 105

    (28) print_vars -> print_vars , print_var .

    ;               reduce using rule 28 (print_vars -> print_vars , print_var .)
    ,               reduce using rule 28 (print_vars -> print_vars , print_var .)


state 106

    (47) expression -> ( expression ) .

    ;               reduce using rule 47 (expression -> ( expression ) .)
    '               reduce using rule 47 (expression -> ( expression ) .)
    <               reduce using rule 47 (expression -> ( expression ) .)
    >               reduce using rule 47 (expression -> ( expression ) .)
    EQ              reduce using rule 47 (expression -> ( expression ) .)
    NEQ             reduce using rule 47 (expression -> ( expression ) .)
    LESSEQ          reduce using rule 47 (expression -> ( expression ) .)
    MOREEQ          reduce using rule 47 (expression -> ( expression ) .)
    +               reduce using rule 47 (expression -> ( expression ) .)
    -               reduce using rule 47 (expression -> ( expression ) .)
    *               reduce using rule 47 (expression -> ( expression ) .)
    /               reduce using rule 47 (expression -> ( expression ) .)
    DOTPLUS         reduce using rule 47 (expression -> ( expression ) .)
    DOTMINUS        reduce using rule 47 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 47 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 47 (expression -> ( expression ) .)
    ,               reduce using rule 47 (expression -> ( expression ) .)
    )               reduce using rule 47 (expression -> ( expression ) .)
    :               reduce using rule 47 (expression -> ( expression ) .)
    IF              reduce using rule 47 (expression -> ( expression ) .)
    WHILE           reduce using rule 47 (expression -> ( expression ) .)
    FOR             reduce using rule 47 (expression -> ( expression ) .)
    BREAK           reduce using rule 47 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 47 (expression -> ( expression ) .)
    RETURN          reduce using rule 47 (expression -> ( expression ) .)
    PRINT           reduce using rule 47 (expression -> ( expression ) .)
    {               reduce using rule 47 (expression -> ( expression ) .)
    ID              reduce using rule 47 (expression -> ( expression ) .)


state 107

    (70) ones -> ONES ( INT . )

    )               shift and go to state 137


state 108

    (67) matrix_init -> [ matrix_rows ] .

    '               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    <               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    >               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    EQ              reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    NEQ             reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    LESSEQ          reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    MOREEQ          reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    +               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    -               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    *               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    /               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    DOTPLUS         reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    DOTMINUS        reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    DOTMUL          reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    DOTDIV          reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    ;               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    ,               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    )               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    :               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    IF              reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    WHILE           reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    FOR             reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    BREAK           reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    CONTINUE        reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    RETURN          reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    PRINT           reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    {               reduce using rule 67 (matrix_init -> [ matrix_rows ] .)
    ID              reduce using rule 67 (matrix_init -> [ matrix_rows ] .)


state 109

    (72) matrix_rows -> matrix_rows ; . row_elems
    (74) row_elems -> . row_elems , number
    (75) row_elems -> . number
    (33) number -> . INT
    (34) number -> . FLOAT

    INT             shift and go to state 48
    FLOAT           shift and go to state 38

    number                         shift and go to state 138
    row_elems                      shift and go to state 139

state 110

    (78) scope -> INT : . INT

    INT             shift and go to state 140


state 111

    (68) matrix_init -> [ scopes ] .

    '               reduce using rule 68 (matrix_init -> [ scopes ] .)
    <               reduce using rule 68 (matrix_init -> [ scopes ] .)
    >               reduce using rule 68 (matrix_init -> [ scopes ] .)
    EQ              reduce using rule 68 (matrix_init -> [ scopes ] .)
    NEQ             reduce using rule 68 (matrix_init -> [ scopes ] .)
    LESSEQ          reduce using rule 68 (matrix_init -> [ scopes ] .)
    MOREEQ          reduce using rule 68 (matrix_init -> [ scopes ] .)
    +               reduce using rule 68 (matrix_init -> [ scopes ] .)
    -               reduce using rule 68 (matrix_init -> [ scopes ] .)
    *               reduce using rule 68 (matrix_init -> [ scopes ] .)
    /               reduce using rule 68 (matrix_init -> [ scopes ] .)
    DOTPLUS         reduce using rule 68 (matrix_init -> [ scopes ] .)
    DOTMINUS        reduce using rule 68 (matrix_init -> [ scopes ] .)
    DOTMUL          reduce using rule 68 (matrix_init -> [ scopes ] .)
    DOTDIV          reduce using rule 68 (matrix_init -> [ scopes ] .)
    ;               reduce using rule 68 (matrix_init -> [ scopes ] .)
    ,               reduce using rule 68 (matrix_init -> [ scopes ] .)
    )               reduce using rule 68 (matrix_init -> [ scopes ] .)
    :               reduce using rule 68 (matrix_init -> [ scopes ] .)
    IF              reduce using rule 68 (matrix_init -> [ scopes ] .)
    WHILE           reduce using rule 68 (matrix_init -> [ scopes ] .)
    FOR             reduce using rule 68 (matrix_init -> [ scopes ] .)
    BREAK           reduce using rule 68 (matrix_init -> [ scopes ] .)
    CONTINUE        reduce using rule 68 (matrix_init -> [ scopes ] .)
    RETURN          reduce using rule 68 (matrix_init -> [ scopes ] .)
    PRINT           reduce using rule 68 (matrix_init -> [ scopes ] .)
    {               reduce using rule 68 (matrix_init -> [ scopes ] .)
    ID              reduce using rule 68 (matrix_init -> [ scopes ] .)


state 112

    (77) scopes -> scopes ; . scope
    (78) scope -> . INT : INT
    (79) scope -> . number : number : number
    (33) number -> . INT
    (34) number -> . FLOAT

    INT             shift and go to state 72
    FLOAT           shift and go to state 38

    number                         shift and go to state 141
    scope                          shift and go to state 142

state 113

    (79) scope -> number : . number : number
    (33) number -> . INT
    (34) number -> . FLOAT

    INT             shift and go to state 48
    FLOAT           shift and go to state 38

    number                         shift and go to state 143

state 114

    (74) row_elems -> row_elems , . number
    (33) number -> . INT
    (34) number -> . FLOAT

    INT             shift and go to state 48
    FLOAT           shift and go to state 38

    number                         shift and go to state 144

state 115

    (58) expression -> expression * expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 58 (expression -> expression * expression .)
    '               reduce using rule 58 (expression -> expression * expression .)
    <               reduce using rule 58 (expression -> expression * expression .)
    >               reduce using rule 58 (expression -> expression * expression .)
    EQ              reduce using rule 58 (expression -> expression * expression .)
    NEQ             reduce using rule 58 (expression -> expression * expression .)
    LESSEQ          reduce using rule 58 (expression -> expression * expression .)
    MOREEQ          reduce using rule 58 (expression -> expression * expression .)
    +               reduce using rule 58 (expression -> expression * expression .)
    -               reduce using rule 58 (expression -> expression * expression .)
    *               reduce using rule 58 (expression -> expression * expression .)
    /               reduce using rule 58 (expression -> expression * expression .)
    ,               reduce using rule 58 (expression -> expression * expression .)
    )               reduce using rule 58 (expression -> expression * expression .)
    :               reduce using rule 58 (expression -> expression * expression .)
    IF              reduce using rule 58 (expression -> expression * expression .)
    WHILE           reduce using rule 58 (expression -> expression * expression .)
    FOR             reduce using rule 58 (expression -> expression * expression .)
    BREAK           reduce using rule 58 (expression -> expression * expression .)
    CONTINUE        reduce using rule 58 (expression -> expression * expression .)
    RETURN          reduce using rule 58 (expression -> expression * expression .)
    PRINT           reduce using rule 58 (expression -> expression * expression .)
    {               reduce using rule 58 (expression -> expression * expression .)
    ID              reduce using rule 58 (expression -> expression * expression .)
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! DOTPLUS         [ reduce using rule 58 (expression -> expression * expression .) ]
  ! DOTMINUS        [ reduce using rule 58 (expression -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 58 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression * expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]


state 116

    (56) expression -> expression + expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 56 (expression -> expression + expression .)
    '               reduce using rule 56 (expression -> expression + expression .)
    <               reduce using rule 56 (expression -> expression + expression .)
    >               reduce using rule 56 (expression -> expression + expression .)
    EQ              reduce using rule 56 (expression -> expression + expression .)
    NEQ             reduce using rule 56 (expression -> expression + expression .)
    LESSEQ          reduce using rule 56 (expression -> expression + expression .)
    MOREEQ          reduce using rule 56 (expression -> expression + expression .)
    +               reduce using rule 56 (expression -> expression + expression .)
    -               reduce using rule 56 (expression -> expression + expression .)
    ,               reduce using rule 56 (expression -> expression + expression .)
    )               reduce using rule 56 (expression -> expression + expression .)
    :               reduce using rule 56 (expression -> expression + expression .)
    IF              reduce using rule 56 (expression -> expression + expression .)
    WHILE           reduce using rule 56 (expression -> expression + expression .)
    FOR             reduce using rule 56 (expression -> expression + expression .)
    BREAK           reduce using rule 56 (expression -> expression + expression .)
    CONTINUE        reduce using rule 56 (expression -> expression + expression .)
    RETURN          reduce using rule 56 (expression -> expression + expression .)
    PRINT           reduce using rule 56 (expression -> expression + expression .)
    {               reduce using rule 56 (expression -> expression + expression .)
    ID              reduce using rule 56 (expression -> expression + expression .)
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! *               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTPLUS         [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTMINUS        [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression + expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]


state 117

    (55) expression -> expression MOREEQ expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 55 (expression -> expression MOREEQ expression .)
    '               reduce using rule 55 (expression -> expression MOREEQ expression .)
    <               reduce using rule 55 (expression -> expression MOREEQ expression .)
    >               reduce using rule 55 (expression -> expression MOREEQ expression .)
    EQ              reduce using rule 55 (expression -> expression MOREEQ expression .)
    NEQ             reduce using rule 55 (expression -> expression MOREEQ expression .)
    LESSEQ          reduce using rule 55 (expression -> expression MOREEQ expression .)
    MOREEQ          reduce using rule 55 (expression -> expression MOREEQ expression .)
    ,               reduce using rule 55 (expression -> expression MOREEQ expression .)
    )               reduce using rule 55 (expression -> expression MOREEQ expression .)
    :               reduce using rule 55 (expression -> expression MOREEQ expression .)
    IF              reduce using rule 55 (expression -> expression MOREEQ expression .)
    WHILE           reduce using rule 55 (expression -> expression MOREEQ expression .)
    FOR             reduce using rule 55 (expression -> expression MOREEQ expression .)
    BREAK           reduce using rule 55 (expression -> expression MOREEQ expression .)
    CONTINUE        reduce using rule 55 (expression -> expression MOREEQ expression .)
    RETURN          reduce using rule 55 (expression -> expression MOREEQ expression .)
    PRINT           reduce using rule 55 (expression -> expression MOREEQ expression .)
    {               reduce using rule 55 (expression -> expression MOREEQ expression .)
    ID              reduce using rule 55 (expression -> expression MOREEQ expression .)
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! +               [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! DOTPLUS         [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! DOTMINUS        [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! DOTMUL          [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression MOREEQ expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]


state 118

    (60) expression -> expression DOTPLUS expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    '               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    <               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    >               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    EQ              reduce using rule 60 (expression -> expression DOTPLUS expression .)
    NEQ             reduce using rule 60 (expression -> expression DOTPLUS expression .)
    LESSEQ          reduce using rule 60 (expression -> expression DOTPLUS expression .)
    MOREEQ          reduce using rule 60 (expression -> expression DOTPLUS expression .)
    +               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    -               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    *               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    /               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    DOTPLUS         reduce using rule 60 (expression -> expression DOTPLUS expression .)
    DOTMINUS        reduce using rule 60 (expression -> expression DOTPLUS expression .)
    ,               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    )               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    :               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    IF              reduce using rule 60 (expression -> expression DOTPLUS expression .)
    WHILE           reduce using rule 60 (expression -> expression DOTPLUS expression .)
    FOR             reduce using rule 60 (expression -> expression DOTPLUS expression .)
    BREAK           reduce using rule 60 (expression -> expression DOTPLUS expression .)
    CONTINUE        reduce using rule 60 (expression -> expression DOTPLUS expression .)
    RETURN          reduce using rule 60 (expression -> expression DOTPLUS expression .)
    PRINT           reduce using rule 60 (expression -> expression DOTPLUS expression .)
    {               reduce using rule 60 (expression -> expression DOTPLUS expression .)
    ID              reduce using rule 60 (expression -> expression DOTPLUS expression .)
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! DOTMUL          [ reduce using rule 60 (expression -> expression DOTPLUS expression .) ]
  ! DOTDIV          [ reduce using rule 60 (expression -> expression DOTPLUS expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]
  ! DOTPLUS         [ shift and go to state 80 ]
  ! DOTMINUS        [ shift and go to state 87 ]


state 119

    (50) expression -> expression < expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 50 (expression -> expression < expression .)
    '               reduce using rule 50 (expression -> expression < expression .)
    <               reduce using rule 50 (expression -> expression < expression .)
    >               reduce using rule 50 (expression -> expression < expression .)
    EQ              reduce using rule 50 (expression -> expression < expression .)
    NEQ             reduce using rule 50 (expression -> expression < expression .)
    LESSEQ          reduce using rule 50 (expression -> expression < expression .)
    MOREEQ          reduce using rule 50 (expression -> expression < expression .)
    ,               reduce using rule 50 (expression -> expression < expression .)
    )               reduce using rule 50 (expression -> expression < expression .)
    :               reduce using rule 50 (expression -> expression < expression .)
    IF              reduce using rule 50 (expression -> expression < expression .)
    WHILE           reduce using rule 50 (expression -> expression < expression .)
    FOR             reduce using rule 50 (expression -> expression < expression .)
    BREAK           reduce using rule 50 (expression -> expression < expression .)
    CONTINUE        reduce using rule 50 (expression -> expression < expression .)
    RETURN          reduce using rule 50 (expression -> expression < expression .)
    PRINT           reduce using rule 50 (expression -> expression < expression .)
    {               reduce using rule 50 (expression -> expression < expression .)
    ID              reduce using rule 50 (expression -> expression < expression .)
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! +               [ reduce using rule 50 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 50 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 50 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression < expression .) ]
  ! DOTPLUS         [ reduce using rule 50 (expression -> expression < expression .) ]
  ! DOTMINUS        [ reduce using rule 50 (expression -> expression < expression .) ]
  ! DOTMUL          [ reduce using rule 50 (expression -> expression < expression .) ]
  ! DOTDIV          [ reduce using rule 50 (expression -> expression < expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]


state 120

    (53) expression -> expression NEQ expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 53 (expression -> expression NEQ expression .)
    '               reduce using rule 53 (expression -> expression NEQ expression .)
    EQ              reduce using rule 53 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 53 (expression -> expression NEQ expression .)
    ,               reduce using rule 53 (expression -> expression NEQ expression .)
    )               reduce using rule 53 (expression -> expression NEQ expression .)
    :               reduce using rule 53 (expression -> expression NEQ expression .)
    IF              reduce using rule 53 (expression -> expression NEQ expression .)
    WHILE           reduce using rule 53 (expression -> expression NEQ expression .)
    FOR             reduce using rule 53 (expression -> expression NEQ expression .)
    BREAK           reduce using rule 53 (expression -> expression NEQ expression .)
    CONTINUE        reduce using rule 53 (expression -> expression NEQ expression .)
    RETURN          reduce using rule 53 (expression -> expression NEQ expression .)
    PRINT           reduce using rule 53 (expression -> expression NEQ expression .)
    {               reduce using rule 53 (expression -> expression NEQ expression .)
    ID              reduce using rule 53 (expression -> expression NEQ expression .)
    <               shift and go to state 81
    >               shift and go to state 89
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! <               [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! >               [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! LESSEQ          [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! MOREEQ          [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! +               [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! DOTPLUS         [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! DOTMINUS        [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! DOTMUL          [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! DOTDIV          [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! '               [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]


state 121

    (59) expression -> expression / expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 59 (expression -> expression / expression .)
    '               reduce using rule 59 (expression -> expression / expression .)
    <               reduce using rule 59 (expression -> expression / expression .)
    >               reduce using rule 59 (expression -> expression / expression .)
    EQ              reduce using rule 59 (expression -> expression / expression .)
    NEQ             reduce using rule 59 (expression -> expression / expression .)
    LESSEQ          reduce using rule 59 (expression -> expression / expression .)
    MOREEQ          reduce using rule 59 (expression -> expression / expression .)
    +               reduce using rule 59 (expression -> expression / expression .)
    -               reduce using rule 59 (expression -> expression / expression .)
    *               reduce using rule 59 (expression -> expression / expression .)
    /               reduce using rule 59 (expression -> expression / expression .)
    ,               reduce using rule 59 (expression -> expression / expression .)
    )               reduce using rule 59 (expression -> expression / expression .)
    :               reduce using rule 59 (expression -> expression / expression .)
    IF              reduce using rule 59 (expression -> expression / expression .)
    WHILE           reduce using rule 59 (expression -> expression / expression .)
    FOR             reduce using rule 59 (expression -> expression / expression .)
    BREAK           reduce using rule 59 (expression -> expression / expression .)
    CONTINUE        reduce using rule 59 (expression -> expression / expression .)
    RETURN          reduce using rule 59 (expression -> expression / expression .)
    PRINT           reduce using rule 59 (expression -> expression / expression .)
    {               reduce using rule 59 (expression -> expression / expression .)
    ID              reduce using rule 59 (expression -> expression / expression .)
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! DOTPLUS         [ reduce using rule 59 (expression -> expression / expression .) ]
  ! DOTMINUS        [ reduce using rule 59 (expression -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 59 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 59 (expression -> expression / expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]


state 122

    (63) expression -> expression DOTDIV expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 63 (expression -> expression DOTDIV expression .)
    '               reduce using rule 63 (expression -> expression DOTDIV expression .)
    <               reduce using rule 63 (expression -> expression DOTDIV expression .)
    >               reduce using rule 63 (expression -> expression DOTDIV expression .)
    EQ              reduce using rule 63 (expression -> expression DOTDIV expression .)
    NEQ             reduce using rule 63 (expression -> expression DOTDIV expression .)
    LESSEQ          reduce using rule 63 (expression -> expression DOTDIV expression .)
    MOREEQ          reduce using rule 63 (expression -> expression DOTDIV expression .)
    +               reduce using rule 63 (expression -> expression DOTDIV expression .)
    -               reduce using rule 63 (expression -> expression DOTDIV expression .)
    *               reduce using rule 63 (expression -> expression DOTDIV expression .)
    /               reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTPLUS         reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTMINUS        reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 63 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 63 (expression -> expression DOTDIV expression .)
    )               reduce using rule 63 (expression -> expression DOTDIV expression .)
    :               reduce using rule 63 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 63 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 63 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 63 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 63 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 63 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 63 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 63 (expression -> expression DOTDIV expression .)
    {               reduce using rule 63 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 63 (expression -> expression DOTDIV expression .)

  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]
  ! DOTPLUS         [ shift and go to state 80 ]
  ! DOTMINUS        [ shift and go to state 87 ]
  ! DOTMUL          [ shift and go to state 85 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 123

    (62) expression -> expression DOTMUL expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 62 (expression -> expression DOTMUL expression .)
    '               reduce using rule 62 (expression -> expression DOTMUL expression .)
    <               reduce using rule 62 (expression -> expression DOTMUL expression .)
    >               reduce using rule 62 (expression -> expression DOTMUL expression .)
    EQ              reduce using rule 62 (expression -> expression DOTMUL expression .)
    NEQ             reduce using rule 62 (expression -> expression DOTMUL expression .)
    LESSEQ          reduce using rule 62 (expression -> expression DOTMUL expression .)
    MOREEQ          reduce using rule 62 (expression -> expression DOTMUL expression .)
    +               reduce using rule 62 (expression -> expression DOTMUL expression .)
    -               reduce using rule 62 (expression -> expression DOTMUL expression .)
    *               reduce using rule 62 (expression -> expression DOTMUL expression .)
    /               reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTPLUS         reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTMINUS        reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 62 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 62 (expression -> expression DOTMUL expression .)
    )               reduce using rule 62 (expression -> expression DOTMUL expression .)
    :               reduce using rule 62 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 62 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 62 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 62 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 62 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 62 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 62 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 62 (expression -> expression DOTMUL expression .)
    {               reduce using rule 62 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 62 (expression -> expression DOTMUL expression .)

  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]
  ! DOTPLUS         [ shift and go to state 80 ]
  ! DOTMINUS        [ shift and go to state 87 ]
  ! DOTMUL          [ shift and go to state 85 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 124

    (61) expression -> expression DOTMINUS expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    '               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    <               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    >               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    EQ              reduce using rule 61 (expression -> expression DOTMINUS expression .)
    NEQ             reduce using rule 61 (expression -> expression DOTMINUS expression .)
    LESSEQ          reduce using rule 61 (expression -> expression DOTMINUS expression .)
    MOREEQ          reduce using rule 61 (expression -> expression DOTMINUS expression .)
    +               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    -               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    *               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    /               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    DOTPLUS         reduce using rule 61 (expression -> expression DOTMINUS expression .)
    DOTMINUS        reduce using rule 61 (expression -> expression DOTMINUS expression .)
    ,               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    )               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    :               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    IF              reduce using rule 61 (expression -> expression DOTMINUS expression .)
    WHILE           reduce using rule 61 (expression -> expression DOTMINUS expression .)
    FOR             reduce using rule 61 (expression -> expression DOTMINUS expression .)
    BREAK           reduce using rule 61 (expression -> expression DOTMINUS expression .)
    CONTINUE        reduce using rule 61 (expression -> expression DOTMINUS expression .)
    RETURN          reduce using rule 61 (expression -> expression DOTMINUS expression .)
    PRINT           reduce using rule 61 (expression -> expression DOTMINUS expression .)
    {               reduce using rule 61 (expression -> expression DOTMINUS expression .)
    ID              reduce using rule 61 (expression -> expression DOTMINUS expression .)
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! DOTMUL          [ reduce using rule 61 (expression -> expression DOTMINUS expression .) ]
  ! DOTDIV          [ reduce using rule 61 (expression -> expression DOTMINUS expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]
  ! *               [ shift and go to state 77 ]
  ! /               [ shift and go to state 83 ]
  ! DOTPLUS         [ shift and go to state 80 ]
  ! DOTMINUS        [ shift and go to state 87 ]


state 125

    (52) expression -> expression EQ expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 52 (expression -> expression EQ expression .)
    '               reduce using rule 52 (expression -> expression EQ expression .)
    EQ              reduce using rule 52 (expression -> expression EQ expression .)
    NEQ             reduce using rule 52 (expression -> expression EQ expression .)
    ,               reduce using rule 52 (expression -> expression EQ expression .)
    )               reduce using rule 52 (expression -> expression EQ expression .)
    :               reduce using rule 52 (expression -> expression EQ expression .)
    IF              reduce using rule 52 (expression -> expression EQ expression .)
    WHILE           reduce using rule 52 (expression -> expression EQ expression .)
    FOR             reduce using rule 52 (expression -> expression EQ expression .)
    BREAK           reduce using rule 52 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 52 (expression -> expression EQ expression .)
    RETURN          reduce using rule 52 (expression -> expression EQ expression .)
    PRINT           reduce using rule 52 (expression -> expression EQ expression .)
    {               reduce using rule 52 (expression -> expression EQ expression .)
    ID              reduce using rule 52 (expression -> expression EQ expression .)
    <               shift and go to state 81
    >               shift and go to state 89
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! <               [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! >               [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! LESSEQ          [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! MOREEQ          [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! +               [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! DOTPLUS         [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! DOTMINUS        [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! DOTMUL          [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! DOTDIV          [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! '               [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]


state 126

    (51) expression -> expression > expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 51 (expression -> expression > expression .)
    '               reduce using rule 51 (expression -> expression > expression .)
    <               reduce using rule 51 (expression -> expression > expression .)
    >               reduce using rule 51 (expression -> expression > expression .)
    EQ              reduce using rule 51 (expression -> expression > expression .)
    NEQ             reduce using rule 51 (expression -> expression > expression .)
    LESSEQ          reduce using rule 51 (expression -> expression > expression .)
    MOREEQ          reduce using rule 51 (expression -> expression > expression .)
    ,               reduce using rule 51 (expression -> expression > expression .)
    )               reduce using rule 51 (expression -> expression > expression .)
    :               reduce using rule 51 (expression -> expression > expression .)
    IF              reduce using rule 51 (expression -> expression > expression .)
    WHILE           reduce using rule 51 (expression -> expression > expression .)
    FOR             reduce using rule 51 (expression -> expression > expression .)
    BREAK           reduce using rule 51 (expression -> expression > expression .)
    CONTINUE        reduce using rule 51 (expression -> expression > expression .)
    RETURN          reduce using rule 51 (expression -> expression > expression .)
    PRINT           reduce using rule 51 (expression -> expression > expression .)
    {               reduce using rule 51 (expression -> expression > expression .)
    ID              reduce using rule 51 (expression -> expression > expression .)
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! +               [ reduce using rule 51 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 51 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 51 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression > expression .) ]
  ! DOTPLUS         [ reduce using rule 51 (expression -> expression > expression .) ]
  ! DOTMINUS        [ reduce using rule 51 (expression -> expression > expression .) ]
  ! DOTMUL          [ reduce using rule 51 (expression -> expression > expression .) ]
  ! DOTDIV          [ reduce using rule 51 (expression -> expression > expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]


state 127

    (57) expression -> expression - expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 57 (expression -> expression - expression .)
    '               reduce using rule 57 (expression -> expression - expression .)
    <               reduce using rule 57 (expression -> expression - expression .)
    >               reduce using rule 57 (expression -> expression - expression .)
    EQ              reduce using rule 57 (expression -> expression - expression .)
    NEQ             reduce using rule 57 (expression -> expression - expression .)
    LESSEQ          reduce using rule 57 (expression -> expression - expression .)
    MOREEQ          reduce using rule 57 (expression -> expression - expression .)
    +               reduce using rule 57 (expression -> expression - expression .)
    -               reduce using rule 57 (expression -> expression - expression .)
    ,               reduce using rule 57 (expression -> expression - expression .)
    )               reduce using rule 57 (expression -> expression - expression .)
    :               reduce using rule 57 (expression -> expression - expression .)
    IF              reduce using rule 57 (expression -> expression - expression .)
    WHILE           reduce using rule 57 (expression -> expression - expression .)
    FOR             reduce using rule 57 (expression -> expression - expression .)
    BREAK           reduce using rule 57 (expression -> expression - expression .)
    CONTINUE        reduce using rule 57 (expression -> expression - expression .)
    RETURN          reduce using rule 57 (expression -> expression - expression .)
    PRINT           reduce using rule 57 (expression -> expression - expression .)
    {               reduce using rule 57 (expression -> expression - expression .)
    ID              reduce using rule 57 (expression -> expression - expression .)
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! *               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTPLUS         [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTMINUS        [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression - expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]
  ! +               [ shift and go to state 78 ]
  ! -               [ shift and go to state 90 ]


state 128

    (54) expression -> expression LESSEQ expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    ;               reduce using rule 54 (expression -> expression LESSEQ expression .)
    '               reduce using rule 54 (expression -> expression LESSEQ expression .)
    <               reduce using rule 54 (expression -> expression LESSEQ expression .)
    >               reduce using rule 54 (expression -> expression LESSEQ expression .)
    EQ              reduce using rule 54 (expression -> expression LESSEQ expression .)
    NEQ             reduce using rule 54 (expression -> expression LESSEQ expression .)
    LESSEQ          reduce using rule 54 (expression -> expression LESSEQ expression .)
    MOREEQ          reduce using rule 54 (expression -> expression LESSEQ expression .)
    ,               reduce using rule 54 (expression -> expression LESSEQ expression .)
    )               reduce using rule 54 (expression -> expression LESSEQ expression .)
    :               reduce using rule 54 (expression -> expression LESSEQ expression .)
    IF              reduce using rule 54 (expression -> expression LESSEQ expression .)
    WHILE           reduce using rule 54 (expression -> expression LESSEQ expression .)
    FOR             reduce using rule 54 (expression -> expression LESSEQ expression .)
    BREAK           reduce using rule 54 (expression -> expression LESSEQ expression .)
    CONTINUE        reduce using rule 54 (expression -> expression LESSEQ expression .)
    RETURN          reduce using rule 54 (expression -> expression LESSEQ expression .)
    PRINT           reduce using rule 54 (expression -> expression LESSEQ expression .)
    {               reduce using rule 54 (expression -> expression LESSEQ expression .)
    ID              reduce using rule 54 (expression -> expression LESSEQ expression .)
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84

  ! +               [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! DOTPLUS         [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! DOTMINUS        [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression LESSEQ expression .) ]
  ! '               [ shift and go to state 86 ]
  ! <               [ shift and go to state 81 ]
  ! >               [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 82 ]
  ! LESSEQ          [ shift and go to state 91 ]
  ! MOREEQ          [ shift and go to state 79 ]


state 129

    (69) eye -> EYE ( INT . )

    )               shift and go to state 145


state 130

    (71) zeros -> ZEROS ( INT . )

    )               shift and go to state 146


state 131

    (22) for_init -> ID = expression . : expression
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    :               shift and go to state 147
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 132

    (15) if_else_instr -> IF ( expression ) instruction .
    (16) if_else_instr -> IF ( expression ) instruction . ELSE instruction

    IF              reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    WHILE           reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    FOR             reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    BREAK           reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    RETURN          reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    PRINT           reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    {               reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    ID              reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    $end            reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    }               reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .)
    ELSE            shift and go to state 148

  ! ELSE            [ reduce using rule 15 (if_else_instr -> IF ( expression ) instruction .) ]


state 133

    (17) if_else_instr -> IF ( error ) instruction .
    (18) if_else_instr -> IF ( error ) instruction . ELSE instruction

    IF              reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    FOR             reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    {               reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    ID              reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    $end            reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    }               reduce using rule 17 (if_else_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 149

  ! ELSE            [ reduce using rule 17 (if_else_instr -> IF ( error ) instruction .) ]


state 134

    (19) while_instr -> WHILE ( expression ) instruction .

    IF              reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    {               reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    ID              reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    $end            reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    }               reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 19 (while_instr -> WHILE ( expression ) instruction .)


state 135

    (20) while_instr -> WHILE ( error ) instruction .

    IF              reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    FOR             reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 20 (while_instr -> WHILE ( error ) instruction .)


state 136

    (37) lvalue -> ID [ INT , INT . ]

    ]               shift and go to state 150


state 137

    (70) ones -> ONES ( INT ) .

    ;               reduce using rule 70 (ones -> ONES ( INT ) .)
    '               reduce using rule 70 (ones -> ONES ( INT ) .)
    <               reduce using rule 70 (ones -> ONES ( INT ) .)
    >               reduce using rule 70 (ones -> ONES ( INT ) .)
    EQ              reduce using rule 70 (ones -> ONES ( INT ) .)
    NEQ             reduce using rule 70 (ones -> ONES ( INT ) .)
    LESSEQ          reduce using rule 70 (ones -> ONES ( INT ) .)
    MOREEQ          reduce using rule 70 (ones -> ONES ( INT ) .)
    +               reduce using rule 70 (ones -> ONES ( INT ) .)
    -               reduce using rule 70 (ones -> ONES ( INT ) .)
    *               reduce using rule 70 (ones -> ONES ( INT ) .)
    /               reduce using rule 70 (ones -> ONES ( INT ) .)
    DOTPLUS         reduce using rule 70 (ones -> ONES ( INT ) .)
    DOTMINUS        reduce using rule 70 (ones -> ONES ( INT ) .)
    DOTMUL          reduce using rule 70 (ones -> ONES ( INT ) .)
    DOTDIV          reduce using rule 70 (ones -> ONES ( INT ) .)
    ,               reduce using rule 70 (ones -> ONES ( INT ) .)
    )               reduce using rule 70 (ones -> ONES ( INT ) .)
    :               reduce using rule 70 (ones -> ONES ( INT ) .)
    IF              reduce using rule 70 (ones -> ONES ( INT ) .)
    WHILE           reduce using rule 70 (ones -> ONES ( INT ) .)
    FOR             reduce using rule 70 (ones -> ONES ( INT ) .)
    BREAK           reduce using rule 70 (ones -> ONES ( INT ) .)
    CONTINUE        reduce using rule 70 (ones -> ONES ( INT ) .)
    RETURN          reduce using rule 70 (ones -> ONES ( INT ) .)
    PRINT           reduce using rule 70 (ones -> ONES ( INT ) .)
    {               reduce using rule 70 (ones -> ONES ( INT ) .)
    ID              reduce using rule 70 (ones -> ONES ( INT ) .)


state 138

    (75) row_elems -> number .

    ,               reduce using rule 75 (row_elems -> number .)
    ]               reduce using rule 75 (row_elems -> number .)
    ;               reduce using rule 75 (row_elems -> number .)


state 139

    (72) matrix_rows -> matrix_rows ; row_elems .
    (74) row_elems -> row_elems . , number

    ]               reduce using rule 72 (matrix_rows -> matrix_rows ; row_elems .)
    ;               reduce using rule 72 (matrix_rows -> matrix_rows ; row_elems .)
    ,               shift and go to state 114


state 140

    (78) scope -> INT : INT .

    ]               reduce using rule 78 (scope -> INT : INT .)
    ;               reduce using rule 78 (scope -> INT : INT .)


state 141

    (79) scope -> number . : number : number

    :               shift and go to state 113


state 142

    (77) scopes -> scopes ; scope .

    ]               reduce using rule 77 (scopes -> scopes ; scope .)
    ;               reduce using rule 77 (scopes -> scopes ; scope .)


state 143

    (79) scope -> number : number . : number

    :               shift and go to state 151


state 144

    (74) row_elems -> row_elems , number .

    ,               reduce using rule 74 (row_elems -> row_elems , number .)
    ]               reduce using rule 74 (row_elems -> row_elems , number .)
    ;               reduce using rule 74 (row_elems -> row_elems , number .)


state 145

    (69) eye -> EYE ( INT ) .

    )               reduce using rule 69 (eye -> EYE ( INT ) .)
    '               reduce using rule 69 (eye -> EYE ( INT ) .)
    <               reduce using rule 69 (eye -> EYE ( INT ) .)
    >               reduce using rule 69 (eye -> EYE ( INT ) .)
    EQ              reduce using rule 69 (eye -> EYE ( INT ) .)
    NEQ             reduce using rule 69 (eye -> EYE ( INT ) .)
    LESSEQ          reduce using rule 69 (eye -> EYE ( INT ) .)
    MOREEQ          reduce using rule 69 (eye -> EYE ( INT ) .)
    +               reduce using rule 69 (eye -> EYE ( INT ) .)
    -               reduce using rule 69 (eye -> EYE ( INT ) .)
    *               reduce using rule 69 (eye -> EYE ( INT ) .)
    /               reduce using rule 69 (eye -> EYE ( INT ) .)
    DOTPLUS         reduce using rule 69 (eye -> EYE ( INT ) .)
    DOTMINUS        reduce using rule 69 (eye -> EYE ( INT ) .)
    DOTMUL          reduce using rule 69 (eye -> EYE ( INT ) .)
    DOTDIV          reduce using rule 69 (eye -> EYE ( INT ) .)
    ;               reduce using rule 69 (eye -> EYE ( INT ) .)
    ,               reduce using rule 69 (eye -> EYE ( INT ) .)
    :               reduce using rule 69 (eye -> EYE ( INT ) .)
    IF              reduce using rule 69 (eye -> EYE ( INT ) .)
    WHILE           reduce using rule 69 (eye -> EYE ( INT ) .)
    FOR             reduce using rule 69 (eye -> EYE ( INT ) .)
    BREAK           reduce using rule 69 (eye -> EYE ( INT ) .)
    CONTINUE        reduce using rule 69 (eye -> EYE ( INT ) .)
    RETURN          reduce using rule 69 (eye -> EYE ( INT ) .)
    PRINT           reduce using rule 69 (eye -> EYE ( INT ) .)
    {               reduce using rule 69 (eye -> EYE ( INT ) .)
    ID              reduce using rule 69 (eye -> EYE ( INT ) .)


state 146

    (71) zeros -> ZEROS ( INT ) .

    ;               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    '               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    <               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    >               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    EQ              reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    NEQ             reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    LESSEQ          reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    MOREEQ          reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    +               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    -               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    *               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    /               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    DOTPLUS         reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    DOTMINUS        reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    DOTMUL          reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    DOTDIV          reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    ,               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    )               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    :               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    IF              reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    WHILE           reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    FOR             reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    BREAK           reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    CONTINUE        reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    RETURN          reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    PRINT           reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    {               reduce using rule 71 (zeros -> ZEROS ( INT ) .)
    ID              reduce using rule 71 (zeros -> ZEROS ( INT ) .)


state 147

    (22) for_init -> ID = expression : . expression
    (44) expression -> . number
    (45) expression -> . lvalue
    (46) expression -> . matrix_init
    (47) expression -> . ( expression )
    (48) expression -> . - expression
    (49) expression -> . expression '
    (50) expression -> . expression < expression
    (51) expression -> . expression > expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . expression LESSEQ expression
    (55) expression -> . expression MOREEQ expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTPLUS expression
    (61) expression -> . expression DOTMINUS expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (33) number -> . INT
    (34) number -> . FLOAT
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]
    (64) matrix_init -> . eye
    (65) matrix_init -> . ones
    (66) matrix_init -> . zeros
    (67) matrix_init -> . [ matrix_rows ]
    (68) matrix_init -> . [ scopes ]
    (69) eye -> . EYE ( INT )
    (70) ones -> . ONES ( INT )
    (71) zeros -> . ZEROS ( INT )

    (               shift and go to state 37
    -               shift and go to state 42
    INT             shift and go to state 48
    FLOAT           shift and go to state 38
    ID              shift and go to state 11
    [               shift and go to state 43
    EYE             shift and go to state 46
    ONES            shift and go to state 40
    ZEROS           shift and go to state 52

    lvalue                         shift and go to state 39
    matrix_init                    shift and go to state 44
    number                         shift and go to state 49
    expression                     shift and go to state 152
    eye                            shift and go to state 41
    zeros                          shift and go to state 47
    ones                           shift and go to state 54

state 148

    (16) if_else_instr -> IF ( expression ) instruction ELSE . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 153
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 149

    (18) if_else_instr -> IF ( error ) instruction ELSE . instruction
    (6) instruction -> . if_else_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . instr_block
    (14) instruction -> . assignment ;
    (15) if_else_instr -> . IF ( expression ) instruction
    (16) if_else_instr -> . IF ( expression ) instruction ELSE instruction
    (17) if_else_instr -> . IF ( error ) instruction
    (18) if_else_instr -> . IF ( error ) instruction ELSE instruction
    (19) while_instr -> . WHILE ( expression ) instruction
    (20) while_instr -> . WHILE ( error ) instruction
    (21) for_instr -> . FOR for_init instruction
    (23) break_instr -> . BREAK ;
    (24) continue_instr -> . CONTINUE ;
    (25) return_instr -> . RETURN expression ;
    (26) print_instr -> . PRINT print_vars ;
    (27) print_instr -> . PRINT error ;
    (32) instr_block -> . { instructions }
    (38) assignment -> . lvalue assign_op expression
    (35) lvalue -> . ID
    (36) lvalue -> . ID [ INT ]
    (37) lvalue -> . ID [ INT , INT ]

    IF              shift and go to state 5
    WHILE           shift and go to state 10
    FOR             shift and go to state 15
    BREAK           shift and go to state 2
    CONTINUE        shift and go to state 3
    RETURN          shift and go to state 23
    PRINT           shift and go to state 13
    {               shift and go to state 14
    ID              shift and go to state 11

    assignment                     shift and go to state 1
    lvalue                         shift and go to state 7
    break_instr                    shift and go to state 4
    continue_instr                 shift and go to state 17
    print_instr                    shift and go to state 20
    if_else_instr                  shift and go to state 9
    while_instr                    shift and go to state 19
    for_instr                      shift and go to state 12
    instruction                    shift and go to state 154
    instr_block                    shift and go to state 22
    return_instr                   shift and go to state 8

state 150

    (37) lvalue -> ID [ INT , INT ] .

    =               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    PLUSASSIGN      reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    MINUSASSIGN     reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    MULASSIGN       reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    DIVASSIGN       reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    '               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    <               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    >               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    EQ              reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    NEQ             reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    LESSEQ          reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    MOREEQ          reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    +               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    -               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    *               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    /               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    DOTPLUS         reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    DOTMINUS        reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    DOTMUL          reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    DOTDIV          reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    ;               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    ,               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    )               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    :               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    IF              reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    WHILE           reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    FOR             reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    BREAK           reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    CONTINUE        reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    RETURN          reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    PRINT           reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    {               reduce using rule 37 (lvalue -> ID [ INT , INT ] .)
    ID              reduce using rule 37 (lvalue -> ID [ INT , INT ] .)


state 151

    (79) scope -> number : number : . number
    (33) number -> . INT
    (34) number -> . FLOAT

    INT             shift and go to state 48
    FLOAT           shift and go to state 38

    number                         shift and go to state 155

state 152

    (22) for_init -> ID = expression : expression .
    (49) expression -> expression . '
    (50) expression -> expression . < expression
    (51) expression -> expression . > expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (54) expression -> expression . LESSEQ expression
    (55) expression -> expression . MOREEQ expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTPLUS expression
    (61) expression -> expression . DOTMINUS expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression

    IF              reduce using rule 22 (for_init -> ID = expression : expression .)
    WHILE           reduce using rule 22 (for_init -> ID = expression : expression .)
    FOR             reduce using rule 22 (for_init -> ID = expression : expression .)
    BREAK           reduce using rule 22 (for_init -> ID = expression : expression .)
    CONTINUE        reduce using rule 22 (for_init -> ID = expression : expression .)
    RETURN          reduce using rule 22 (for_init -> ID = expression : expression .)
    PRINT           reduce using rule 22 (for_init -> ID = expression : expression .)
    {               reduce using rule 22 (for_init -> ID = expression : expression .)
    ID              reduce using rule 22 (for_init -> ID = expression : expression .)
    '               shift and go to state 86
    <               shift and go to state 81
    >               shift and go to state 89
    EQ              shift and go to state 88
    NEQ             shift and go to state 82
    LESSEQ          shift and go to state 91
    MOREEQ          shift and go to state 79
    +               shift and go to state 78
    -               shift and go to state 90
    *               shift and go to state 77
    /               shift and go to state 83
    DOTPLUS         shift and go to state 80
    DOTMINUS        shift and go to state 87
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 84


state 153

    (16) if_else_instr -> IF ( expression ) instruction ELSE instruction .

    IF              reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    {               reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 16 (if_else_instr -> IF ( expression ) instruction ELSE instruction .)


state 154

    (18) if_else_instr -> IF ( error ) instruction ELSE instruction .

    IF              reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    FOR             reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 18 (if_else_instr -> IF ( error ) instruction ELSE instruction .)


state 155

    (79) scope -> number : number : number .

    ]               reduce using rule 79 (scope -> number : number : number .)
    ;               reduce using rule 79 (scope -> number : number : number .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for : in state 72 resolved as shift
