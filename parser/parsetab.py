
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEleft,right=PLUSASSIGNMINUSASSIGNMULASSIGNDIVASSIGNleftEQNEQleft><LESSEQMOREEQleft+-left*/leftDOTPLUSDOTMINUSleftDOTMULDOTDIVleft:' ( ) * + , - / : ; < = > BREAK CONTINUE DIVASSIGN DOTDIV DOTMINUS DOTMUL DOTPLUS ELSE EQ EYE FLOAT FOR ID IF INT LESSEQ MINUSASSIGN MOREEQ MULASSIGN NEQ ONES PLUSASSIGN PRINT RETURN STRING WHILE ZEROS [ ] { }program : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction\n                        | instructioninstruction : if_else_instr\n                       | while_instr\n                       | for_instr\n                       | break_instr\n                       | continue_instr\n                       | return_instr\n                       | print_instr\n                       | instr_block\n                       | assignment ';'if_else_instr : IF '(' expression ')' instruction %prec IFX \n                         | IF '(' expression ')' instruction ELSE instruction\n                         | IF '(' error ')' instruction  %prec IFX\n                         | IF '(' error ')' instruction ELSE instruction while_instr : WHILE '(' expression ')' instruction\n                       | WHILE '(' error ')' instruction for_instr : FOR for_init instructionfor_init : ID '=' expression ':' expressionbreak_instr : BREAK ';'continue_instr : CONTINUE ';'return_instr : RETURN expression ';'print_instr : PRINT print_vars ';'\n                       | PRINT error ';'print_vars : print_vars ',' print_var\n                      | print_varprint_var : STRING\n                     | expression instr_block : '{' instructions '}'number : INTnumber : FLOATlvalue : ID\n                  | ID '[' INT ']'\n                  | ID '[' INT ',' INT ']'assignment : lvalue assign_op expressionassign_op : '='\n                     | PLUSASSIGN\n                     | MINUSASSIGN\n                     | MULASSIGN\n                     | DIVASSIGNexpression : number\n                      | lvalue\n                      | matrix_init\n                      | '(' expression ')'\n                      | '-' expression\n                      | expression '\\''expression : expression '<' expression\n                      | expression '>' expression\n                      | expression EQ expression\n                      | expression NEQ expression\n                      | expression LESSEQ expression\n                      | expression MOREEQ expressionexpression : expression '+' expression\n                      | expression '-' expression\n                      | expression '*' expression\n                      | expression '/' expressionexpression : expression DOTPLUS expression\n                      | expression DOTMINUS expression\n                      | expression DOTMUL expression\n                      | expression DOTDIV expressionmatrix_init : eye\n                       | ones\n                       | zeros\n                       | '[' matrix_rows ']'\n                       | '[' scopes ']'eye : EYE '(' INT ')' ones : ONES '(' INT ')' zeros : ZEROS '(' INT ')' matrix_rows : matrix_rows ';' row_elems\n                       | row_elems row_elems : row_elems ',' number\n                     | number scopes : scope\n                | scopes ';' scope scope : INT ':' INT\n                | number ':' number ':' number"
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,24,25,30,31,64,66,93,95,96,132,133,134,135,153,154,],[-3,0,-1,-2,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,-14,-23,-24,-21,-25,-26,-27,-32,-15,-17,-19,-20,-16,-18,]),'IF':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[14,14,-5,-6,-7,-8,-9,-10,-11,-12,-13,14,-35,-4,-14,14,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,14,-21,-25,-49,-48,-26,-27,-32,14,14,14,14,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,14,14,-22,-37,-16,-18,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[15,15,-5,-6,-7,-8,-9,-10,-11,-12,-13,15,-35,-4,-14,15,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,15,-21,-25,-49,-48,-26,-27,-32,15,15,15,15,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,15,15,-22,-37,-16,-18,]),'FOR':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,-35,-4,-14,16,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,16,-21,-25,-49,-48,-26,-27,-32,16,16,16,16,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,16,16,-22,-37,-16,-18,]),'BREAK':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,-35,-4,-14,17,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,17,-21,-25,-49,-48,-26,-27,-32,17,17,17,17,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,17,17,-22,-37,-16,-18,]),'CONTINUE':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,-35,-4,-14,18,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,18,-21,-25,-49,-48,-26,-27,-32,18,18,18,18,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,18,18,-22,-37,-16,-18,]),'RETURN':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-13,19,-35,-4,-14,19,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,19,-21,-25,-49,-48,-26,-27,-32,19,19,19,19,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,19,19,-22,-37,-16,-18,]),'PRINT':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,-35,-4,-14,20,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,20,-21,-25,-49,-48,-26,-27,-32,20,20,20,20,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,20,20,-22,-37,-16,-18,]),'{':([0,3,4,5,6,7,8,9,10,11,12,21,23,24,25,28,30,31,33,34,35,38,39,41,42,43,52,64,66,67,83,93,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,144,145,146,148,149,150,152,153,154,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,-35,-4,-14,21,-23,-24,-44,-45,-46,-33,-34,-64,-65,-66,21,-21,-25,-49,-48,-26,-27,-32,21,21,21,21,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,-69,-70,-71,21,21,-22,-37,-16,-18,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,16,19,20,21,23,24,25,26,27,28,30,31,33,34,35,36,37,38,39,41,42,43,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,93,94,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,132,133,134,135,136,144,145,146,148,149,150,152,153,154,],[23,23,-5,-6,-7,-8,-9,-10,-11,-12,-13,29,23,23,23,-35,-4,-14,23,23,23,-23,-24,-44,-45,-46,23,23,-33,-34,-64,-65,-66,23,23,-39,-40,-41,-42,-43,-21,23,-25,-49,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-48,-26,23,-27,-32,23,23,23,23,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-15,-17,-19,-20,23,-69,-70,-71,23,23,-22,-37,-16,-18,]),'}':([4,5,6,7,8,9,10,11,12,24,25,30,31,52,64,66,93,95,96,132,133,134,135,153,154,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,-14,-23,-24,96,-21,-25,-26,-27,-32,-15,-17,-19,-20,-16,-18,]),'ELSE':([5,6,7,8,9,10,11,12,25,30,31,64,66,93,95,96,132,133,134,135,153,154,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-24,-21,-25,-26,-27,-32,148,149,-19,-20,-16,-18,]),';':([13,17,18,23,32,33,34,35,38,39,41,42,43,47,48,49,50,51,67,83,84,85,86,87,88,89,97,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,129,130,137,138,139,141,143,144,145,146,152,155,],[25,30,31,-35,66,-44,-45,-46,-33,-34,-64,-65,-66,93,95,-29,-30,-31,-49,-48,120,122,-73,-76,-75,-33,-38,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-28,-36,-72,-75,-77,-74,-78,-69,-70,-71,-37,-79,]),'(':([14,15,19,20,26,27,36,37,44,45,46,53,54,55,56,57,58,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[26,27,36,36,36,36,36,36,90,91,92,36,-39,-40,-41,-42,-43,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'-':([19,20,23,26,27,32,33,34,35,36,37,38,39,41,42,43,51,53,54,55,56,57,58,60,62,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,94,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,136,144,145,146,150,152,],[37,37,-35,37,37,75,-44,-45,-46,37,37,-33,-34,-64,-65,-66,75,37,-39,-40,-41,-42,-43,75,75,37,-49,37,37,37,37,37,37,37,37,37,37,37,37,37,37,75,-48,37,75,75,75,75,75,75,75,75,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,37,-69,-70,-71,75,-37,]),'INT':([19,20,26,27,36,37,40,53,54,55,56,57,58,59,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,90,91,92,94,120,122,123,124,125,131,136,151,],[38,38,38,38,38,38,89,38,-39,-40,-41,-42,-43,98,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,126,127,128,38,38,89,38,38,143,147,38,38,]),'FLOAT':([19,20,26,27,36,37,40,53,54,55,56,57,58,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,120,122,123,124,136,151,],[39,39,39,39,39,39,39,39,-39,-40,-41,-42,-43,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'[':([19,20,23,26,27,36,37,53,54,55,56,57,58,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[40,40,59,40,40,40,40,40,-39,-40,-41,-42,-43,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'EYE':([19,20,26,27,36,37,53,54,55,56,57,58,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[44,44,44,44,44,44,44,-39,-40,-41,-42,-43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'ONES':([19,20,26,27,36,37,53,54,55,56,57,58,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[45,45,45,45,45,45,45,-39,-40,-41,-42,-43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ZEROS':([19,20,26,27,36,37,53,54,55,56,57,58,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[46,46,46,46,46,46,46,-39,-40,-41,-42,-43,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'error':([20,26,27,],[48,61,63,]),'STRING':([20,94,],[50,50,]),'=':([22,23,29,130,152,],[54,-35,65,-36,-37,]),'PLUSASSIGN':([22,23,130,152,],[55,-35,-36,-37,]),'MINUSASSIGN':([22,23,130,152,],[56,-35,-36,-37,]),'MULASSIGN':([22,23,130,152,],[57,-35,-36,-37,]),'DIVASSIGN':([22,23,130,152,],[58,-35,-36,-37,]),"'":([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,67,-44,-45,-46,-33,-34,-64,-65,-66,67,67,67,-49,67,-48,67,67,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,67,-37,]),'<':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,68,-44,-45,-46,-33,-34,-64,-65,-66,68,68,68,-49,68,-48,68,68,-50,-51,68,68,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,68,-37,]),'>':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,69,-44,-45,-46,-33,-34,-64,-65,-66,69,69,69,-49,69,-48,69,69,-50,-51,69,69,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,69,-37,]),'EQ':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,70,-44,-45,-46,-33,-34,-64,-65,-66,70,70,70,-49,70,-48,70,70,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,70,-37,]),'NEQ':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,71,-44,-45,-46,-33,-34,-64,-65,-66,71,71,71,-49,71,-48,71,71,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,71,-37,]),'LESSEQ':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,72,-44,-45,-46,-33,-34,-64,-65,-66,72,72,72,-49,72,-48,72,72,-50,-51,72,72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,72,-37,]),'MOREEQ':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,73,-44,-45,-46,-33,-34,-64,-65,-66,73,73,73,-49,73,-48,73,73,-50,-51,73,73,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,73,-37,]),'+':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,74,-44,-45,-46,-33,-34,-64,-65,-66,74,74,74,-49,74,-48,74,74,74,74,74,74,74,74,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,74,-37,]),'*':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,76,-44,-45,-46,-33,-34,-64,-65,-66,76,76,76,-49,76,76,76,76,76,76,76,76,76,76,76,76,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,76,-37,]),'/':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,77,-44,-45,-46,-33,-34,-64,-65,-66,77,77,77,-49,77,77,77,77,77,77,77,77,77,77,77,77,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,77,-37,]),'DOTPLUS':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,78,-44,-45,-46,-33,-34,-64,-65,-66,78,78,78,-49,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,78,-37,]),'DOTMINUS':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,79,-44,-45,-46,-33,-34,-64,-65,-66,79,79,79,-49,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-60,-61,-62,-63,-47,-67,-68,-36,-69,-70,-71,79,-37,]),'DOTMUL':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,80,-44,-45,-46,-33,-34,-64,-65,-66,80,80,80,-49,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-62,-63,-47,-67,-68,-36,-69,-70,-71,80,-37,]),'DOTDIV':([23,32,33,34,35,38,39,41,42,43,51,60,62,67,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,144,145,146,150,152,],[-35,81,-44,-45,-46,-33,-34,-64,-65,-66,81,81,81,-49,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-62,-63,-47,-67,-68,-36,-69,-70,-71,81,-37,]),',':([23,33,34,35,38,39,41,42,43,47,49,50,51,67,83,86,88,89,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,129,130,137,138,141,144,145,146,152,],[-35,-44,-45,-46,-33,-34,-64,-65,-66,94,-29,-30,-31,-49,-48,123,-75,-33,131,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-28,-36,123,-75,-74,-69,-70,-71,-37,]),')':([23,33,34,35,38,39,41,42,43,60,61,62,63,67,82,83,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,126,127,128,130,144,145,146,152,],[-35,-44,-45,-46,-33,-34,-64,-65,-66,99,100,101,102,-49,118,-48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,144,145,146,-36,-69,-70,-71,-37,]),':':([23,33,34,35,38,39,41,42,43,67,83,88,89,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,130,140,142,144,145,146,152,],[-35,-44,-45,-46,-33,-34,-64,-65,-66,-49,-48,124,125,136,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-47,-67,-68,-36,124,151,-69,-70,-71,-37,]),']':([38,39,84,85,86,87,88,89,98,137,138,139,141,143,147,155,],[-33,-34,119,121,-73,-76,-75,-33,130,-72,-75,-77,-74,-78,152,-79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,21,],[3,52,]),'instruction':([0,3,21,28,52,99,100,101,102,148,149,],[4,24,4,64,24,132,133,134,135,153,154,]),'if_else_instr':([0,3,21,28,52,99,100,101,102,148,149,],[5,5,5,5,5,5,5,5,5,5,5,]),'while_instr':([0,3,21,28,52,99,100,101,102,148,149,],[6,6,6,6,6,6,6,6,6,6,6,]),'for_instr':([0,3,21,28,52,99,100,101,102,148,149,],[7,7,7,7,7,7,7,7,7,7,7,]),'break_instr':([0,3,21,28,52,99,100,101,102,148,149,],[8,8,8,8,8,8,8,8,8,8,8,]),'continue_instr':([0,3,21,28,52,99,100,101,102,148,149,],[9,9,9,9,9,9,9,9,9,9,9,]),'return_instr':([0,3,21,28,52,99,100,101,102,148,149,],[10,10,10,10,10,10,10,10,10,10,10,]),'print_instr':([0,3,21,28,52,99,100,101,102,148,149,],[11,11,11,11,11,11,11,11,11,11,11,]),'instr_block':([0,3,21,28,52,99,100,101,102,148,149,],[12,12,12,12,12,12,12,12,12,12,12,]),'assignment':([0,3,21,28,52,99,100,101,102,148,149,],[13,13,13,13,13,13,13,13,13,13,13,]),'lvalue':([0,3,19,20,21,26,27,28,36,37,52,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,99,100,101,102,136,148,149,],[22,22,34,34,22,34,34,22,34,34,22,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,22,22,22,22,34,22,22,]),'for_init':([16,],[28,]),'expression':([19,20,26,27,36,37,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[32,51,60,62,82,83,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,51,150,]),'number':([19,20,26,27,36,37,40,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,120,122,123,124,136,151,],[33,33,33,33,33,33,88,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,138,140,141,142,33,155,]),'matrix_init':([19,20,26,27,36,37,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'eye':([19,20,26,27,36,37,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'ones':([19,20,26,27,36,37,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'zeros':([19,20,26,27,36,37,53,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,94,136,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'print_vars':([20,],[47,]),'print_var':([20,94,],[49,129,]),'assign_op':([22,],[53,]),'matrix_rows':([40,],[84,]),'scopes':([40,],[85,]),'row_elems':([40,120,],[86,137,]),'scope':([40,122,],[87,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','MParser.py',38),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','MParser.py',42),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','MParser.py',46),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','MParser.py',49),
  ('instructions -> instruction','instructions',1,'p_instructions','MParser.py',50),
  ('instruction -> if_else_instr','instruction',1,'p_instruction','MParser.py',59),
  ('instruction -> while_instr','instruction',1,'p_instruction','MParser.py',60),
  ('instruction -> for_instr','instruction',1,'p_instruction','MParser.py',61),
  ('instruction -> break_instr','instruction',1,'p_instruction','MParser.py',62),
  ('instruction -> continue_instr','instruction',1,'p_instruction','MParser.py',63),
  ('instruction -> return_instr','instruction',1,'p_instruction','MParser.py',64),
  ('instruction -> print_instr','instruction',1,'p_instruction','MParser.py',65),
  ('instruction -> instr_block','instruction',1,'p_instruction','MParser.py',66),
  ('instruction -> assignment ;','instruction',2,'p_instruction','MParser.py',67),
  ('if_else_instr -> IF ( expression ) instruction','if_else_instr',5,'p_if_else_inst','MParser.py',71),
  ('if_else_instr -> IF ( expression ) instruction ELSE instruction','if_else_instr',7,'p_if_else_inst','MParser.py',72),
  ('if_else_instr -> IF ( error ) instruction','if_else_instr',5,'p_if_else_inst','MParser.py',73),
  ('if_else_instr -> IF ( error ) instruction ELSE instruction','if_else_instr',7,'p_if_else_inst','MParser.py',74),
  ('while_instr -> WHILE ( expression ) instruction','while_instr',5,'p_while_inst','MParser.py',79),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_inst','MParser.py',80),
  ('for_instr -> FOR for_init instruction','for_instr',3,'p_for_inst','MParser.py',84),
  ('for_init -> ID = expression : expression','for_init',5,'p_for_init','MParser.py',88),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_inst','MParser.py',92),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_inst','MParser.py',96),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','MParser.py',100),
  ('print_instr -> PRINT print_vars ;','print_instr',3,'p_print_instr','MParser.py',104),
  ('print_instr -> PRINT error ;','print_instr',3,'p_print_instr','MParser.py',105),
  ('print_vars -> print_vars , print_var','print_vars',3,'p_print_vars','MParser.py',109),
  ('print_vars -> print_var','print_vars',1,'p_print_vars','MParser.py',110),
  ('print_var -> STRING','print_var',1,'p_print_var','MParser.py',119),
  ('print_var -> expression','print_var',1,'p_print_var','MParser.py',120),
  ('instr_block -> { instructions }','instr_block',3,'p_complex_instr','MParser.py',124),
  ('number -> INT','number',1,'p_number_int','MParser.py',128),
  ('number -> FLOAT','number',1,'p_number_float','MParser.py',132),
  ('lvalue -> ID','lvalue',1,'p_lvalue','MParser.py',136),
  ('lvalue -> ID [ INT ]','lvalue',4,'p_lvalue','MParser.py',137),
  ('lvalue -> ID [ INT , INT ]','lvalue',6,'p_lvalue','MParser.py',138),
  ('assignment -> lvalue assign_op expression','assignment',3,'p_assignment','MParser.py',145),
  ('assign_op -> =','assign_op',1,'p_assign_op','MParser.py',149),
  ('assign_op -> PLUSASSIGN','assign_op',1,'p_assign_op','MParser.py',150),
  ('assign_op -> MINUSASSIGN','assign_op',1,'p_assign_op','MParser.py',151),
  ('assign_op -> MULASSIGN','assign_op',1,'p_assign_op','MParser.py',152),
  ('assign_op -> DIVASSIGN','assign_op',1,'p_assign_op','MParser.py',153),
  ('expression -> number','expression',1,'p_expression','MParser.py',157),
  ('expression -> lvalue','expression',1,'p_expression','MParser.py',158),
  ('expression -> matrix_init','expression',1,'p_expression','MParser.py',159),
  ('expression -> ( expression )','expression',3,'p_expression','MParser.py',160),
  ('expression -> - expression','expression',2,'p_expression','MParser.py',161),
  ("expression -> expression '",'expression',2,'p_expression','MParser.py',162),
  ('expression -> expression < expression','expression',3,'p_rel_op','MParser.py',171),
  ('expression -> expression > expression','expression',3,'p_rel_op','MParser.py',172),
  ('expression -> expression EQ expression','expression',3,'p_rel_op','MParser.py',173),
  ('expression -> expression NEQ expression','expression',3,'p_rel_op','MParser.py',174),
  ('expression -> expression LESSEQ expression','expression',3,'p_rel_op','MParser.py',175),
  ('expression -> expression MOREEQ expression','expression',3,'p_rel_op','MParser.py',176),
  ('expression -> expression + expression','expression',3,'p_num_op','MParser.py',180),
  ('expression -> expression - expression','expression',3,'p_num_op','MParser.py',181),
  ('expression -> expression * expression','expression',3,'p_num_op','MParser.py',182),
  ('expression -> expression / expression','expression',3,'p_num_op','MParser.py',183),
  ('expression -> expression DOTPLUS expression','expression',3,'p_dot_op','MParser.py',187),
  ('expression -> expression DOTMINUS expression','expression',3,'p_dot_op','MParser.py',188),
  ('expression -> expression DOTMUL expression','expression',3,'p_dot_op','MParser.py',189),
  ('expression -> expression DOTDIV expression','expression',3,'p_dot_op','MParser.py',190),
  ('matrix_init -> eye','matrix_init',1,'p_matrix_init','MParser.py',194),
  ('matrix_init -> ones','matrix_init',1,'p_matrix_init','MParser.py',195),
  ('matrix_init -> zeros','matrix_init',1,'p_matrix_init','MParser.py',196),
  ('matrix_init -> [ matrix_rows ]','matrix_init',3,'p_matrix_init','MParser.py',197),
  ('matrix_init -> [ scopes ]','matrix_init',3,'p_matrix_init','MParser.py',198),
  ('eye -> EYE ( INT )','eye',4,'p_eye','MParser.py',202),
  ('ones -> ONES ( INT )','ones',4,'p_ones','MParser.py',206),
  ('zeros -> ZEROS ( INT )','zeros',4,'p_zeros','MParser.py',210),
  ('matrix_rows -> matrix_rows ; row_elems','matrix_rows',3,'p_matrix_rows','MParser.py',214),
  ('matrix_rows -> row_elems','matrix_rows',1,'p_matrix_rows','MParser.py',215),
  ('row_elems -> row_elems , number','row_elems',3,'p_row_elems','MParser.py',224),
  ('row_elems -> number','row_elems',1,'p_row_elems','MParser.py',225),
  ('scopes -> scope','scopes',1,'p_scopes','MParser.py',234),
  ('scopes -> scopes ; scope','scopes',3,'p_scopes','MParser.py',235),
  ('scope -> INT : INT','scope',3,'p_scope','MParser.py',245),
  ('scope -> number : number : number','scope',5,'p_scope','MParser.py',246),
]
