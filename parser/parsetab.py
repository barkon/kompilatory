
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEleft,right=PLUSASSIGNMINUSASSIGNMULASSIGNDIVASSIGNleftEQNEQleft><LESSEQMOREEQleft+-left*/nonassocUMINUSleftDOTPLUSDOTMINUSleftDOTMULDOTDIV' ( ) * + , - / : ; < = > BREAK CONTINUE DIVASSIGN DOTDIV DOTMINUS DOTMUL DOTPLUS ELSE EQ EYE FLOAT FOR ID IF INT LESSEQ MINUSASSIGN MOREEQ MULASSIGN NEQ ONES PLUSASSIGN PRINT RETURN STRING WHILE ZEROS [ ] { }program : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction\n                        | instructioninstruction : if_else_instr\n                       | while_instr\n                       | for_instr\n                       | break_instr\n                       | continue_instr\n                       | return_instr\n                       | print_instr\n                       | instr_block\n                       | assignment ';'if_else_instr : IF '(' expression ')' instruction %prec IFX \n                         | IF '(' expression ')' instruction ELSE instruction\n                         | IF '(' error ')' instruction  %prec IFX\n                         | IF '(' error ')' instruction ELSE instruction while_instr : WHILE '(' expression ')' instruction\n                       | WHILE '(' error ')' instruction for_instr : FOR for_init instructionfor_init : ID '=' expression ':' expressionbreak_instr : BREAK ';'continue_instr : CONTINUE ';'return_instr : RETURN expression ';'print_instr : PRINT print_vars ';'\n                       | PRINT error ';'print_vars : print_vars ',' print_var\n                      | print_varprint_var : STRING\n                     | expression instr_block : '{' instructions '}'number : INTnumber : FLOATlvalue : ID\n                  | ID '[' INT ']'\n                  | ID '[' INT ',' INT ']'assignment : lvalue assign_op expressionassign_op : '='\n                     | PLUSASSIGN\n                     | MINUSASSIGN\n                     | MULASSIGN\n                     | DIVASSIGNexpression : number\n                      | lvalue\n                      | matrix_init\n                      | '(' expression ')'\n                      | '-' expression %prec UMINUS\n                      | expression '\\''expression : expression '<' expression\n                      | expression '>' expression\n                      | expression EQ expression\n                      | expression NEQ expression\n                      | expression LESSEQ expression\n                      | expression MOREEQ expressionexpression : expression '+' expression\n                      | expression '-' expression\n                      | expression '*' expression\n                      | expression '/' expressionexpression : expression DOTPLUS expression\n                      | expression DOTMINUS expression\n                      | expression DOTMUL expression\n                      | expression DOTDIV expressionmatrix_init : eye\n                       | ones\n                       | zeros\n                       | '[' matrix_rows ']'\n                       | '[' scopes ']'eye : EYE '(' INT ')' ones : ONES '(' INT ')' zeros : ZEROS '(' INT ')' matrix_rows : matrix_rows ';' row_elems\n                       | row_elems row_elems : row_elems ',' number\n                     | number scopes : scope\n                | scopes ';' scope scope : INT ':' INT\n                | number ':' number ':' number"
    
_lr_action_items = {'BREAK':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[2,-9,-11,-6,-35,-8,2,2,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,2,2,-4,-26,-48,-49,-27,-32,-21,-25,2,2,2,2,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,2,2,-37,-22,-16,-18,]),'ID':([0,4,8,9,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,41,42,44,47,48,49,54,55,57,58,66,67,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,147,148,149,150,152,153,154,],[11,-9,-11,-6,-35,-8,11,11,56,11,-10,-7,-12,-5,-13,11,-14,-23,-24,11,-41,-42,-40,11,-39,-43,11,11,-34,-45,-64,11,-46,-66,-33,-44,-65,11,11,-4,-26,11,-48,11,11,11,11,11,11,11,11,11,-49,11,11,11,11,11,-27,-32,11,-21,-25,11,11,11,11,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,11,11,11,-37,-22,-16,-18,]),'CONTINUE':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[3,-9,-11,-6,-35,-8,3,3,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,3,3,-4,-26,-48,-49,-27,-32,-21,-25,3,3,3,3,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,3,3,-37,-22,-16,-18,]),'IF':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[5,-9,-11,-6,-35,-8,5,5,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,5,5,-4,-26,-48,-49,-27,-32,-21,-25,5,5,5,5,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,5,5,-37,-22,-16,-18,]),'(':([5,10,13,23,27,28,29,30,31,32,33,34,37,40,42,46,52,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[27,34,37,37,37,-41,-42,-40,37,-39,-43,37,37,69,37,92,94,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'/':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,83,-66,-33,-44,-65,83,83,83,83,83,-48,-49,-36,-47,-67,-68,-58,83,83,-60,83,83,-59,-63,-62,-61,83,83,83,83,83,-70,-69,-71,-37,83,]),']':([38,48,65,71,72,73,74,75,76,136,138,139,140,142,144,155,],[-34,-33,103,108,-33,111,-76,-75,-73,150,-75,-72,-78,-77,-74,-79,]),'=':([7,11,56,103,150,],[32,-35,96,-36,-37,]),'DIVASSIGN':([7,11,103,150,],[33,-35,-36,-37,]),'EQ':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,88,-66,-33,-44,-65,88,88,88,88,88,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,88,-70,-69,-71,-37,88,]),'>':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,89,-66,-33,-44,-65,89,89,89,89,89,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,89,-59,-63,-62,-61,89,-51,-57,-54,89,-70,-69,-71,-37,89,]),'FOR':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[15,-9,-11,-6,-35,-8,15,15,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,15,15,-4,-26,-48,-49,-27,-32,-21,-25,15,15,15,15,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,15,15,-37,-22,-16,-18,]),';':([1,2,3,11,36,38,39,41,44,45,47,48,49,50,51,53,54,59,62,70,71,72,73,74,75,76,86,103,105,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,137,138,139,140,142,144,145,146,150,155,],[24,25,26,-35,66,-34,-45,-64,-46,-31,-66,-33,-44,93,-30,-29,-65,98,-38,-48,109,-33,112,-76,-75,-73,-49,-36,-28,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-70,-75,-72,-78,-77,-74,-69,-71,-37,-79,]),'INT':([13,23,27,28,29,30,31,32,33,34,35,37,42,43,67,69,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,94,96,104,109,110,112,113,114,147,151,],[48,48,48,-41,-42,-40,48,-39,-43,48,65,48,48,72,48,107,48,48,48,48,48,48,48,48,48,48,48,48,48,48,129,130,48,136,48,140,72,48,48,48,48,]),'-':([11,13,23,27,28,29,30,31,32,33,34,37,38,39,41,42,44,45,47,48,49,54,59,60,62,63,67,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,147,150,152,],[-35,42,42,42,-41,-42,-40,42,-39,-43,42,42,-34,-45,-64,42,-46,90,-66,-33,-44,-65,90,90,90,90,42,90,-48,42,42,42,42,42,42,42,42,42,-49,42,42,42,42,42,42,-36,-47,-67,-68,-58,-56,90,-60,90,90,-59,-63,-62,-61,90,90,-57,90,90,-70,-69,-71,42,-37,90,]),'<':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,81,-66,-33,-44,-65,81,81,81,81,81,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,81,-59,-63,-62,-61,81,-51,-57,-54,81,-70,-69,-71,-37,81,]),'NEQ':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,82,-66,-33,-44,-65,82,82,82,82,82,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,82,-70,-69,-71,-37,82,]),'DOTDIV':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,84,-66,-33,-44,-65,84,84,84,84,84,84,-49,-36,-47,-67,-68,84,84,84,84,84,84,84,-63,-62,84,84,84,84,84,84,-70,-69,-71,-37,84,]),')':([11,38,39,41,44,47,48,49,54,60,61,63,64,68,70,86,103,106,107,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,137,145,146,150,],[-35,-34,-45,-64,-46,-66,-33,-44,-65,99,100,101,102,106,-48,-49,-36,-47,137,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,145,146,-70,-69,-71,-37,]),'error':([13,27,34,],[50,61,64,]),'ONES':([13,23,27,28,29,30,31,32,33,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[40,40,40,-41,-42,-40,40,-39,-43,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'LESSEQ':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,91,-66,-33,-44,-65,91,91,91,91,91,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,91,-59,-63,-62,-61,91,-51,-57,-54,91,-70,-69,-71,-37,91,]),'+':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,78,-66,-33,-44,-65,78,78,78,78,78,-48,-49,-36,-47,-67,-68,-58,-56,78,-60,78,78,-59,-63,-62,-61,78,78,-57,78,78,-70,-69,-71,-37,78,]),'MOREEQ':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,79,-66,-33,-44,-65,79,79,79,79,79,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,79,-59,-63,-62,-61,79,-51,-57,-54,79,-70,-69,-71,-37,79,]),'DOTMINUS':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,87,-66,-33,-44,-65,87,87,87,87,87,87,-49,-36,-47,-67,-68,87,87,87,-60,87,87,87,-63,-62,-61,87,87,87,87,87,-70,-69,-71,-37,87,]),'DOTMUL':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,85,-66,-33,-44,-65,85,85,85,85,85,85,-49,-36,-47,-67,-68,85,85,85,85,85,85,85,-63,-62,85,85,85,85,85,85,-70,-69,-71,-37,85,]),'MINUSASSIGN':([7,11,103,150,],[28,-35,-36,-37,]),'$end':([0,4,6,8,9,12,16,17,18,19,20,21,22,24,25,26,58,66,93,95,97,98,132,133,134,135,153,154,],[-3,-9,0,-11,-6,-8,-2,-10,-1,-7,-12,-5,-13,-14,-23,-24,-4,-26,-27,-32,-21,-25,-15,-17,-19,-20,-16,-18,]),"'":([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,86,-66,-33,-44,-65,86,86,86,86,86,-48,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,86,-70,-69,-71,-37,86,]),'ELSE':([4,8,9,12,17,19,20,22,24,25,26,66,93,95,97,98,132,133,134,135,153,154,],[-9,-11,-6,-8,-10,-7,-12,-13,-14,-23,-24,-26,-27,-32,-21,-25,148,149,-19,-20,-16,-18,]),'DOTPLUS':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,80,-66,-33,-44,-65,80,80,80,80,80,80,-49,-36,-47,-67,-68,80,80,80,-60,80,80,80,-63,-62,-61,80,80,80,80,80,-70,-69,-71,-37,80,]),'PRINT':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[13,-9,-11,-6,-35,-8,13,13,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,13,13,-4,-26,-48,-49,-27,-32,-21,-25,13,13,13,13,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,13,13,-37,-22,-16,-18,]),'{':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[14,-9,-11,-6,-35,-8,14,14,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,14,14,-4,-26,-48,-49,-27,-32,-21,-25,14,14,14,14,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,14,14,-37,-22,-16,-18,]),'*':([11,38,39,41,44,45,47,48,49,54,59,60,62,63,68,70,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,145,146,150,152,],[-35,-34,-45,-64,-46,77,-66,-33,-44,-65,77,77,77,77,77,-48,-49,-36,-47,-67,-68,-58,77,77,-60,77,77,-59,-63,-62,-61,77,77,77,77,77,-70,-69,-71,-37,77,]),'[':([11,13,23,27,28,29,30,31,32,33,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[35,43,43,43,-41,-42,-40,43,-39,-43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'MULASSIGN':([7,11,103,150,],[29,-35,-36,-37,]),':':([11,38,39,41,44,47,48,49,54,70,72,75,86,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,137,141,143,145,146,150,],[-35,-34,-45,-64,-46,-66,-33,-44,-65,-48,110,113,-49,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,147,-70,113,151,-69,-71,-37,]),'EYE':([13,23,27,28,29,30,31,32,33,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[46,46,46,-41,-42,-40,46,-39,-43,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'WHILE':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[10,-9,-11,-6,-35,-8,10,10,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,10,10,-4,-26,-48,-49,-27,-32,-21,-25,10,10,10,10,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,10,10,-37,-22,-16,-18,]),'PLUSASSIGN':([7,11,103,150,],[30,-35,-36,-37,]),'ZEROS':([13,23,27,28,29,30,31,32,33,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[52,52,52,-41,-42,-40,52,-39,-43,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),',':([11,36,38,39,41,44,45,47,48,49,51,53,54,65,70,72,75,76,86,103,105,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,137,138,139,144,145,146,150,],[-35,67,-34,-45,-64,-46,-31,-66,-33,-44,-30,-29,-65,104,-48,-33,-75,114,-49,-36,-28,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-70,-75,114,-74,-69,-71,-37,]),'STRING':([13,67,],[51,51,]),'FLOAT':([13,23,27,28,29,30,31,32,33,34,37,42,43,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,109,112,113,114,147,151,],[38,38,38,-41,-42,-40,38,-39,-43,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'}':([4,8,9,12,17,19,20,21,22,24,25,26,55,58,66,93,95,97,98,132,133,134,135,153,154,],[-9,-11,-6,-8,-10,-7,-12,-5,-13,-14,-23,-24,95,-4,-26,-27,-32,-21,-25,-15,-17,-19,-20,-16,-18,]),'RETURN':([0,4,8,9,11,12,14,16,17,19,20,21,22,24,25,26,38,39,41,44,47,48,49,54,55,57,58,66,70,86,93,95,97,98,99,100,101,102,103,106,108,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,137,145,146,148,149,150,152,153,154,],[23,-9,-11,-6,-35,-8,23,23,-10,-7,-12,-5,-13,-14,-23,-24,-34,-45,-64,-46,-66,-33,-44,-65,23,23,-4,-26,-48,-49,-27,-32,-21,-25,23,23,23,23,-36,-47,-67,-68,-58,-56,-55,-60,-50,-53,-59,-63,-62,-61,-52,-51,-57,-54,-15,-17,-19,-20,-70,-69,-71,23,23,-37,-22,-16,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,14,16,55,57,99,100,101,102,148,149,],[1,1,1,1,1,1,1,1,1,1,1,]),'print_vars':([13,],[36,]),'print_var':([13,67,],[53,105,]),'program':([0,],[6,]),'scopes':([43,],[73,]),'matrix_rows':([43,],[71,]),'lvalue':([0,13,14,16,23,27,31,34,37,42,55,57,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,99,100,101,102,147,148,149,],[7,39,7,7,39,39,39,39,39,39,7,7,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,7,7,7,7,39,7,7,]),'assign_op':([7,],[31,]),'eye':([13,23,27,31,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'break_instr':([0,14,16,55,57,99,100,101,102,148,149,],[4,4,4,4,4,4,4,4,4,4,4,]),'for_instr':([0,14,16,55,57,99,100,101,102,148,149,],[12,12,12,12,12,12,12,12,12,12,12,]),'return_instr':([0,14,16,55,57,99,100,101,102,148,149,],[8,8,8,8,8,8,8,8,8,8,8,]),'row_elems':([43,109,],[76,139,]),'if_else_instr':([0,14,16,55,57,99,100,101,102,148,149,],[9,9,9,9,9,9,9,9,9,9,9,]),'matrix_init':([13,23,27,31,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'instructions':([0,14,],[16,55,]),'expression':([13,23,27,31,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[45,59,60,62,63,68,70,45,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,152,]),'continue_instr':([0,14,16,55,57,99,100,101,102,148,149,],[17,17,17,17,17,17,17,17,17,17,17,]),'instructions_opt':([0,],[18,]),'zeros':([13,23,27,31,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'scope':([43,112,],[74,142,]),'print_instr':([0,14,16,55,57,99,100,101,102,148,149,],[20,20,20,20,20,20,20,20,20,20,20,]),'while_instr':([0,14,16,55,57,99,100,101,102,148,149,],[19,19,19,19,19,19,19,19,19,19,19,]),'number':([13,23,27,31,34,37,42,43,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,109,112,113,114,147,151,],[49,49,49,49,49,49,49,75,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,138,141,143,144,49,155,]),'for_init':([15,],[57,]),'instruction':([0,14,16,55,57,99,100,101,102,148,149,],[21,21,58,58,97,132,133,134,135,153,154,]),'instr_block':([0,14,16,55,57,99,100,101,102,148,149,],[22,22,22,22,22,22,22,22,22,22,22,]),'ones':([13,23,27,31,34,37,42,67,77,78,79,80,81,82,83,84,85,87,88,89,90,91,96,147,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','MParser.py',38),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','MParser.py',43),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','MParser.py',47),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','MParser.py',51),
  ('instructions -> instruction','instructions',1,'p_instructions','MParser.py',52),
  ('instruction -> if_else_instr','instruction',1,'p_instruction','MParser.py',61),
  ('instruction -> while_instr','instruction',1,'p_instruction','MParser.py',62),
  ('instruction -> for_instr','instruction',1,'p_instruction','MParser.py',63),
  ('instruction -> break_instr','instruction',1,'p_instruction','MParser.py',64),
  ('instruction -> continue_instr','instruction',1,'p_instruction','MParser.py',65),
  ('instruction -> return_instr','instruction',1,'p_instruction','MParser.py',66),
  ('instruction -> print_instr','instruction',1,'p_instruction','MParser.py',67),
  ('instruction -> instr_block','instruction',1,'p_instruction','MParser.py',68),
  ('instruction -> assignment ;','instruction',2,'p_instruction','MParser.py',69),
  ('if_else_instr -> IF ( expression ) instruction','if_else_instr',5,'p_if_else_inst','MParser.py',73),
  ('if_else_instr -> IF ( expression ) instruction ELSE instruction','if_else_instr',7,'p_if_else_inst','MParser.py',74),
  ('if_else_instr -> IF ( error ) instruction','if_else_instr',5,'p_if_else_inst','MParser.py',75),
  ('if_else_instr -> IF ( error ) instruction ELSE instruction','if_else_instr',7,'p_if_else_inst','MParser.py',76),
  ('while_instr -> WHILE ( expression ) instruction','while_instr',5,'p_while_inst','MParser.py',81),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_inst','MParser.py',82),
  ('for_instr -> FOR for_init instruction','for_instr',3,'p_for_inst','MParser.py',86),
  ('for_init -> ID = expression : expression','for_init',5,'p_for_init','MParser.py',90),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_inst','MParser.py',94),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_inst','MParser.py',98),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','MParser.py',102),
  ('print_instr -> PRINT print_vars ;','print_instr',3,'p_print_instr','MParser.py',106),
  ('print_instr -> PRINT error ;','print_instr',3,'p_print_instr','MParser.py',107),
  ('print_vars -> print_vars , print_var','print_vars',3,'p_print_vars','MParser.py',111),
  ('print_vars -> print_var','print_vars',1,'p_print_vars','MParser.py',112),
  ('print_var -> STRING','print_var',1,'p_print_var','MParser.py',121),
  ('print_var -> expression','print_var',1,'p_print_var','MParser.py',122),
  ('instr_block -> { instructions }','instr_block',3,'p_complex_instr','MParser.py',126),
  ('number -> INT','number',1,'p_number_int','MParser.py',130),
  ('number -> FLOAT','number',1,'p_number_float','MParser.py',134),
  ('lvalue -> ID','lvalue',1,'p_lvalue','MParser.py',138),
  ('lvalue -> ID [ INT ]','lvalue',4,'p_lvalue','MParser.py',139),
  ('lvalue -> ID [ INT , INT ]','lvalue',6,'p_lvalue','MParser.py',140),
  ('assignment -> lvalue assign_op expression','assignment',3,'p_assignment','MParser.py',147),
  ('assign_op -> =','assign_op',1,'p_assign_op','MParser.py',151),
  ('assign_op -> PLUSASSIGN','assign_op',1,'p_assign_op','MParser.py',152),
  ('assign_op -> MINUSASSIGN','assign_op',1,'p_assign_op','MParser.py',153),
  ('assign_op -> MULASSIGN','assign_op',1,'p_assign_op','MParser.py',154),
  ('assign_op -> DIVASSIGN','assign_op',1,'p_assign_op','MParser.py',155),
  ('expression -> number','expression',1,'p_expression','MParser.py',159),
  ('expression -> lvalue','expression',1,'p_expression','MParser.py',160),
  ('expression -> matrix_init','expression',1,'p_expression','MParser.py',161),
  ('expression -> ( expression )','expression',3,'p_expression','MParser.py',162),
  ('expression -> - expression','expression',2,'p_expression','MParser.py',163),
  ("expression -> expression '",'expression',2,'p_expression','MParser.py',164),
  ('expression -> expression < expression','expression',3,'p_rel_op','MParser.py',173),
  ('expression -> expression > expression','expression',3,'p_rel_op','MParser.py',174),
  ('expression -> expression EQ expression','expression',3,'p_rel_op','MParser.py',175),
  ('expression -> expression NEQ expression','expression',3,'p_rel_op','MParser.py',176),
  ('expression -> expression LESSEQ expression','expression',3,'p_rel_op','MParser.py',177),
  ('expression -> expression MOREEQ expression','expression',3,'p_rel_op','MParser.py',178),
  ('expression -> expression + expression','expression',3,'p_num_op','MParser.py',182),
  ('expression -> expression - expression','expression',3,'p_num_op','MParser.py',183),
  ('expression -> expression * expression','expression',3,'p_num_op','MParser.py',184),
  ('expression -> expression / expression','expression',3,'p_num_op','MParser.py',185),
  ('expression -> expression DOTPLUS expression','expression',3,'p_dot_op','MParser.py',189),
  ('expression -> expression DOTMINUS expression','expression',3,'p_dot_op','MParser.py',190),
  ('expression -> expression DOTMUL expression','expression',3,'p_dot_op','MParser.py',191),
  ('expression -> expression DOTDIV expression','expression',3,'p_dot_op','MParser.py',192),
  ('matrix_init -> eye','matrix_init',1,'p_matrix_init','MParser.py',196),
  ('matrix_init -> ones','matrix_init',1,'p_matrix_init','MParser.py',197),
  ('matrix_init -> zeros','matrix_init',1,'p_matrix_init','MParser.py',198),
  ('matrix_init -> [ matrix_rows ]','matrix_init',3,'p_matrix_init','MParser.py',199),
  ('matrix_init -> [ scopes ]','matrix_init',3,'p_matrix_init','MParser.py',200),
  ('eye -> EYE ( INT )','eye',4,'p_eye','MParser.py',204),
  ('ones -> ONES ( INT )','ones',4,'p_ones','MParser.py',208),
  ('zeros -> ZEROS ( INT )','zeros',4,'p_zeros','MParser.py',212),
  ('matrix_rows -> matrix_rows ; row_elems','matrix_rows',3,'p_matrix_rows','MParser.py',216),
  ('matrix_rows -> row_elems','matrix_rows',1,'p_matrix_rows','MParser.py',217),
  ('row_elems -> row_elems , number','row_elems',3,'p_row_elems','MParser.py',226),
  ('row_elems -> number','row_elems',1,'p_row_elems','MParser.py',227),
  ('scopes -> scope','scopes',1,'p_scopes','MParser.py',236),
  ('scopes -> scopes ; scope','scopes',3,'p_scopes','MParser.py',237),
  ('scope -> INT : INT','scope',3,'p_scope','MParser.py',247),
  ('scope -> number : number : number','scope',5,'p_scope','MParser.py',248),
]
