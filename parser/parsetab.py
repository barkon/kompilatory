
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEleft,right=PLUSASSIGNMINUSASSIGNMULASSIGNDIVASSIGNleftEQNEQleft><LESSEQMOREEQleft+-left*/nonassocUMINUSleftDOTPLUSDOTMINUSleftDOTMULDOTDIV' ( ) * + , - / : ; < = > BREAK CONTINUE DIVASSIGN DOTDIV DOTMINUS DOTMUL DOTPLUS ELSE EQ EYE FLOAT FOR ID IF INT LESSEQ MINUSASSIGN MOREEQ MULASSIGN NEQ ONES PLUSASSIGN PRINT RETURN STRING WHILE ZEROS [ ] { }program : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction\n                        | instructioninstruction : if_else_instr\n                       | while_instr\n                       | for_instr\n                       | break_instr\n                       | continue_instr\n                       | return_instr\n                       | print_instr\n                       | instr_block\n                       | assignment ';'if_else_instr : IF '(' expression ')' instruction %prec IFX \n                         | IF '(' expression ')' instruction ELSE instruction\n                         | IF '(' error ')' instruction  %prec IFX\n                         | IF '(' error ')' instruction ELSE instruction while_instr : WHILE '(' expression ')' instruction\n                       | WHILE '(' error ')' instruction for_instr : FOR for_init instructionfor_init : ID '=' expression ':' expressionbreak_instr : BREAK ';'continue_instr : CONTINUE ';'return_instr : RETURN expression ';'print_instr : PRINT print_vars ';'\n                       | PRINT error ';'print_vars : print_vars ',' print_var\n                      | print_varprint_var : STRING\n                     | expression instr_block : '{' instructions '}'number : INTnumber : FLOATlvalue : ID\n                  | ID '[' INT ']'\n                  | ID '[' INT ',' INT ']'assignment : lvalue assign_op expressionassign_op : '='\n                     | PLUSASSIGN\n                     | MINUSASSIGN\n                     | MULASSIGN\n                     | DIVASSIGNexpression : number\n                      | lvalue\n                      | matrix_init\n                      | '(' expression ')'\n                      | '-' expression %prec UMINUS\n                      | expression '\\''expression : expression '<' expression\n                      | expression '>' expression\n                      | expression EQ expression\n                      | expression NEQ expression\n                      | expression LESSEQ expression\n                      | expression MOREEQ expressionexpression : expression '+' expression\n                      | expression '-' expression\n                      | expression '*' expression\n                      | expression '/' expressionexpression : expression DOTPLUS expression\n                      | expression DOTMINUS expression\n                      | expression DOTMUL expression\n                      | expression DOTDIV expressionmatrix_init : eye\n                       | ones\n                       | zeros\n                       | '[' matrix_rows ']'\n                       | '[' scopes ']'eye : EYE '(' expression ')' ones : ONES '(' expression ')' zeros : ZEROS '(' expression ')' matrix_rows : matrix_rows ';' row_elems\n                       | row_elems row_elems : row_elems ',' number\n                     | number scopes : scope\n                | scopes ';' scope scope : INT ':' INT\n                | number ':' number ':' number"
    
_lr_action_items = {'<':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,62,-34,-45,-64,-66,-46,-65,-44,-33,62,-49,-48,62,62,62,62,-36,-50,-58,-56,-62,-60,62,-51,-54,-57,62,-59,-63,-61,-55,62,62,-47,62,-68,-67,62,-71,-69,-70,-37,62,]),'ELSE':([1,2,3,8,9,11,17,19,25,44,59,61,68,90,96,97,144,145,146,147,154,155,],[-13,-7,-12,-6,-9,-8,-10,-11,-24,-14,-23,-32,-25,-21,-27,-26,151,152,-19,-20,-16,-18,]),',':([4,29,30,31,35,37,38,40,41,54,55,57,58,60,76,79,85,86,87,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,131,133,134,135,138,139,141,148,],[-35,-34,-45,-64,-66,-46,-65,-44,-33,-31,-30,98,-29,99,-49,-48,-33,124,-75,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,-28,-71,-69,-70,124,-75,-74,-37,]),'DOTMUL':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,65,-34,-45,-64,-66,-46,-65,-44,-33,65,-49,65,65,65,65,65,-36,65,65,65,-62,65,65,65,65,65,65,65,-63,65,65,65,65,-47,65,-68,-67,65,-71,-69,-70,-37,65,]),'STRING':([18,98,],[55,55,]),'{':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[6,-13,-7,-12,-35,6,-6,-9,-8,6,-10,-11,-5,-24,6,-34,-45,-64,-66,-46,-65,-44,-33,6,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,6,6,6,6,-71,-69,-70,-15,-17,-19,-20,-37,-22,6,6,-16,-18,]),'error':([18,45,46,],[56,92,94,]),'ZEROS':([7,18,32,34,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[28,28,28,28,28,28,-42,28,-41,-43,-39,-40,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'$end':([0,1,2,3,8,9,11,16,17,19,20,22,23,25,44,53,59,61,68,90,96,97,144,145,146,147,154,155,],[-3,-13,-7,-12,-6,-9,-8,-2,-10,-11,-1,0,-5,-24,-14,-4,-23,-32,-25,-21,-27,-26,-15,-17,-19,-20,-16,-18,]),'RETURN':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[7,-13,-7,-12,-35,7,-6,-9,-8,7,-10,-11,-5,-24,7,-34,-45,-64,-66,-46,-65,-44,-33,7,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,7,7,7,7,-71,-69,-70,-15,-17,-19,-20,-37,-22,7,7,-16,-18,]),'DIVASSIGN':([4,15,100,148,],[-35,50,-36,-37,]),'WHILE':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[14,-13,-7,-12,-35,14,-6,-9,-8,14,-10,-11,-5,-24,14,-34,-45,-64,-66,-46,-65,-44,-33,14,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,14,14,14,14,-71,-69,-70,-15,-17,-19,-20,-37,-22,14,14,-16,-18,]),'-':([4,7,18,27,29,30,31,32,34,35,37,38,40,41,45,46,47,48,49,50,51,52,54,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,93,95,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,143,148,150,],[-35,32,32,71,-34,-45,-64,32,32,-66,-46,-65,-44,-33,32,32,-42,32,-41,-43,-39,-40,71,32,32,32,32,32,32,32,32,32,32,32,32,32,-49,32,32,-48,32,71,32,32,71,71,71,32,-36,71,-58,-56,-62,-60,71,71,71,-57,71,-59,-63,-61,71,71,71,-47,71,-68,-67,71,-71,-69,-70,32,-37,71,]),'CONTINUE':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[5,-13,-7,-12,-35,5,-6,-9,-8,5,-10,-11,-5,-24,5,-34,-45,-64,-66,-46,-65,-44,-33,5,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,5,5,5,5,-71,-69,-70,-15,-17,-19,-20,-37,-22,5,5,-16,-18,]),'*':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,63,-34,-45,-64,-66,-46,-65,-44,-33,63,-49,-48,63,63,63,63,-36,63,-58,63,-62,-60,63,63,63,63,63,-59,-63,-61,63,63,63,-47,63,-68,-67,63,-71,-69,-70,-37,63,]),'PRINT':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[18,-13,-7,-12,-35,18,-6,-9,-8,18,-10,-11,-5,-24,18,-34,-45,-64,-66,-46,-65,-44,-33,18,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,18,18,18,18,-71,-69,-70,-15,-17,-19,-20,-37,-22,18,18,-16,-18,]),'EYE':([7,18,32,34,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[33,33,33,33,33,33,-42,33,-41,-43,-39,-40,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'BREAK':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[21,-13,-7,-12,-35,21,-6,-9,-8,21,-10,-11,-5,-24,21,-34,-45,-64,-66,-46,-65,-44,-33,21,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,21,21,21,21,-71,-69,-70,-15,-17,-19,-20,-37,-22,21,21,-16,-18,]),';':([4,5,12,21,27,29,30,31,35,37,38,40,41,54,55,56,57,58,76,79,83,84,85,86,87,88,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,131,133,134,135,137,138,139,140,141,148,153,],[-35,25,44,59,68,-34,-45,-64,-66,-46,-65,-44,-33,-31,-30,96,97,-29,-49,-48,119,121,-33,-73,-75,-76,-38,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,-28,-71,-69,-70,-77,-72,-75,-78,-74,-37,-79,]),'/':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,73,-34,-45,-64,-66,-46,-65,-44,-33,73,-49,-48,73,73,73,73,-36,73,-58,73,-62,-60,73,73,73,73,73,-59,-63,-61,73,73,73,-47,73,-68,-67,73,-71,-69,-70,-37,73,]),'(':([7,13,14,18,28,32,33,34,36,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[34,45,46,34,78,34,80,34,82,34,34,-42,34,-41,-43,-39,-40,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'PLUSASSIGN':([4,15,100,148,],[-35,52,-36,-37,]),'ONES':([7,18,32,34,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[36,36,36,36,36,36,-42,36,-41,-43,-39,-40,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'INT':([7,18,24,32,34,39,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,99,119,121,123,124,125,143,149,],[41,41,60,41,41,85,41,41,-42,41,-41,-43,-39,-40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,132,85,41,140,41,41,41,41,]),'[':([4,7,18,32,34,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[24,39,39,39,39,39,39,-42,39,-41,-43,-39,-40,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'>':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,69,-34,-45,-64,-66,-46,-65,-44,-33,69,-49,-48,69,69,69,69,-36,-50,-58,-56,-62,-60,69,-51,-54,-57,69,-59,-63,-61,-55,69,69,-47,69,-68,-67,69,-71,-69,-70,-37,69,]),'NEQ':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,67,-34,-45,-64,-66,-46,-65,-44,-33,67,-49,-48,67,67,67,67,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,67,67,-47,67,-68,-67,67,-71,-69,-70,-37,67,]),')':([4,29,30,31,35,37,38,40,41,76,79,81,91,92,93,94,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,133,134,135,148,],[-35,-34,-45,-64,-66,-46,-65,-44,-33,-49,-48,117,127,128,129,130,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,133,134,-47,135,-68,-67,-71,-69,-70,-37,]),'FLOAT':([7,18,32,34,39,45,46,47,48,49,50,51,52,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,119,121,124,125,143,149,],[29,29,29,29,29,29,29,-42,29,-41,-43,-39,-40,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'}':([1,2,3,8,9,11,17,19,23,25,26,44,53,59,61,68,90,96,97,144,145,146,147,154,155,],[-13,-7,-12,-6,-9,-8,-10,-11,-5,-24,61,-14,-4,-23,-32,-25,-21,-27,-26,-15,-17,-19,-20,-16,-18,]),'IF':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[13,-13,-7,-12,-35,13,-6,-9,-8,13,-10,-11,-5,-24,13,-34,-45,-64,-66,-46,-65,-44,-33,13,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,13,13,13,13,-71,-69,-70,-15,-17,-19,-20,-37,-22,13,13,-16,-18,]),'LESSEQ':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,70,-34,-45,-64,-66,-46,-65,-44,-33,70,-49,-48,70,70,70,70,-36,-50,-58,-56,-62,-60,70,-51,-54,-57,70,-59,-63,-61,-55,70,70,-47,70,-68,-67,70,-71,-69,-70,-37,70,]),'ID':([0,1,2,3,4,6,7,8,9,10,11,16,17,18,19,23,25,26,29,30,31,32,34,35,37,38,40,41,43,44,45,46,47,48,49,50,51,52,53,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,89,90,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,143,144,145,146,147,148,150,151,152,154,155,],[4,-13,-7,-12,-35,4,4,-6,-9,42,-8,4,-10,4,-11,-5,-24,4,-34,-45,-64,4,4,-66,-46,-65,-44,-33,4,-14,4,4,-42,4,-41,-43,-39,-40,-4,-23,-32,4,4,4,4,4,4,-25,4,4,4,4,4,4,4,-49,4,4,-48,4,4,4,-21,-27,-26,4,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,4,4,4,4,-71,-69,-70,4,-15,-17,-19,-20,-37,-22,4,4,-16,-18,]),'DOTMINUS':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,75,-34,-45,-64,-66,-46,-65,-44,-33,75,-49,75,75,75,75,75,-36,75,75,75,-62,-60,75,75,75,75,75,75,-63,-61,75,75,75,-47,75,-68,-67,75,-71,-69,-70,-37,75,]),'FOR':([0,1,2,3,4,6,8,9,11,16,17,19,23,25,26,29,30,31,35,37,38,40,41,43,44,53,59,61,68,76,79,90,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,127,128,129,130,133,134,135,144,145,146,147,148,150,151,152,154,155,],[10,-13,-7,-12,-35,10,-6,-9,-8,10,-10,-11,-5,-24,10,-34,-45,-64,-66,-46,-65,-44,-33,10,-14,-4,-23,-32,-25,-49,-48,-21,-27,-26,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,10,10,10,10,-71,-69,-70,-15,-17,-19,-20,-37,-22,10,10,-16,-18,]),'MOREEQ':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,77,-34,-45,-64,-66,-46,-65,-44,-33,77,-49,-48,77,77,77,77,-36,-50,-58,-56,-62,-60,77,-51,-54,-57,77,-59,-63,-61,-55,77,77,-47,77,-68,-67,77,-71,-69,-70,-37,77,]),'MULASSIGN':([4,15,100,148,],[-35,47,-36,-37,]),'+':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,64,-34,-45,-64,-66,-46,-65,-44,-33,64,-49,-48,64,64,64,64,-36,64,-58,-56,-62,-60,64,64,64,-57,64,-59,-63,-61,64,64,64,-47,64,-68,-67,64,-71,-69,-70,-37,64,]),'DOTPLUS':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,66,-34,-45,-64,-66,-46,-65,-44,-33,66,-49,66,66,66,66,66,-36,66,66,66,-62,-60,66,66,66,66,66,66,-63,-61,66,66,66,-47,66,-68,-67,66,-71,-69,-70,-37,66,]),'=':([4,15,42,100,148,],[-35,51,89,-36,-37,]),'DOTDIV':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,74,-34,-45,-64,-66,-46,-65,-44,-33,74,-49,74,74,74,74,74,-36,74,74,74,-62,74,74,74,74,74,74,74,-63,74,74,74,74,-47,74,-68,-67,74,-71,-69,-70,-37,74,]),'EQ':([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,72,-34,-45,-64,-66,-46,-65,-44,-33,72,-49,-48,72,72,72,72,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,72,72,-47,72,-68,-67,72,-71,-69,-70,-37,72,]),':':([4,29,30,31,35,37,38,40,41,76,79,85,87,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,122,126,133,134,135,136,142,148,],[-35,-34,-45,-64,-66,-46,-65,-44,-33,-49,-48,123,125,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,-47,-68,-67,143,-71,-69,-70,125,149,-37,]),']':([29,41,60,83,84,85,86,87,88,132,137,138,139,140,141,153,],[-34,-33,100,120,122,-33,-73,-75,-76,148,-77,-72,-75,-78,-74,-79,]),'MINUSASSIGN':([4,15,100,148,],[-35,49,-36,-37,]),"'":([4,27,29,30,31,35,37,38,40,41,54,76,79,81,91,93,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,126,133,134,135,148,150,],[-35,76,-34,-45,-64,-66,-46,-65,-44,-33,76,-49,-48,76,76,76,76,-36,-50,-58,-56,-62,-60,-53,-51,-54,-57,-52,-59,-63,-61,-55,76,76,-47,76,-68,-67,76,-71,-69,-70,-37,76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instr_block':([0,6,16,26,43,127,128,129,130,151,152,],[1,1,1,1,1,1,1,1,1,1,1,]),'while_instr':([0,6,16,26,43,127,128,129,130,151,152,],[2,2,2,2,2,2,2,2,2,2,2,]),'expression':([7,18,32,34,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[27,54,79,81,91,93,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,126,54,150,]),'assign_op':([15,],[48,]),'print_vars':([18,],[57,]),'for_init':([10,],[43,]),'lvalue':([0,6,7,16,18,26,32,34,43,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,127,128,129,130,143,151,152,],[15,15,30,15,30,15,30,30,15,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,15,15,15,15,30,15,15,]),'if_else_instr':([0,6,16,26,43,127,128,129,130,151,152,],[8,8,8,8,8,8,8,8,8,8,8,]),'break_instr':([0,6,16,26,43,127,128,129,130,151,152,],[9,9,9,9,9,9,9,9,9,9,9,]),'for_instr':([0,6,16,26,43,127,128,129,130,151,152,],[11,11,11,11,11,11,11,11,11,11,11,]),'assignment':([0,6,16,26,43,127,128,129,130,151,152,],[12,12,12,12,12,12,12,12,12,12,12,]),'print_instr':([0,6,16,26,43,127,128,129,130,151,152,],[3,3,3,3,3,3,3,3,3,3,3,]),'row_elems':([39,121,],[86,138,]),'scope':([39,119,],[88,137,]),'scopes':([39,],[83,]),'instructions':([0,6,],[16,26,]),'continue_instr':([0,6,16,26,43,127,128,129,130,151,152,],[17,17,17,17,17,17,17,17,17,17,17,]),'return_instr':([0,6,16,26,43,127,128,129,130,151,152,],[19,19,19,19,19,19,19,19,19,19,19,]),'instructions_opt':([0,],[20,]),'eye':([7,18,32,34,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'matrix_rows':([39,],[84,]),'program':([0,],[22,]),'matrix_init':([7,18,32,34,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'ones':([7,18,32,34,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'print_var':([18,98,],[58,131,]),'instruction':([0,6,16,26,43,127,128,129,130,151,152,],[23,23,53,53,90,144,145,146,147,154,155,]),'zeros':([7,18,32,34,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,143,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'number':([7,18,32,34,39,45,46,48,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,80,82,89,98,119,121,124,125,143,149,],[40,40,40,40,87,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,136,139,141,142,40,153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','MParser.py',38),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','MParser.py',43),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','MParser.py',47),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','MParser.py',50),
  ('instructions -> instruction','instructions',1,'p_instructions','MParser.py',51),
  ('instruction -> if_else_instr','instruction',1,'p_instruction','MParser.py',60),
  ('instruction -> while_instr','instruction',1,'p_instruction','MParser.py',61),
  ('instruction -> for_instr','instruction',1,'p_instruction','MParser.py',62),
  ('instruction -> break_instr','instruction',1,'p_instruction','MParser.py',63),
  ('instruction -> continue_instr','instruction',1,'p_instruction','MParser.py',64),
  ('instruction -> return_instr','instruction',1,'p_instruction','MParser.py',65),
  ('instruction -> print_instr','instruction',1,'p_instruction','MParser.py',66),
  ('instruction -> instr_block','instruction',1,'p_instruction','MParser.py',67),
  ('instruction -> assignment ;','instruction',2,'p_instruction','MParser.py',68),
  ('if_else_instr -> IF ( expression ) instruction','if_else_instr',5,'p_if_else_inst','MParser.py',72),
  ('if_else_instr -> IF ( expression ) instruction ELSE instruction','if_else_instr',7,'p_if_else_inst','MParser.py',73),
  ('if_else_instr -> IF ( error ) instruction','if_else_instr',5,'p_if_else_inst','MParser.py',74),
  ('if_else_instr -> IF ( error ) instruction ELSE instruction','if_else_instr',7,'p_if_else_inst','MParser.py',75),
  ('while_instr -> WHILE ( expression ) instruction','while_instr',5,'p_while_inst','MParser.py',80),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_inst','MParser.py',81),
  ('for_instr -> FOR for_init instruction','for_instr',3,'p_for_inst','MParser.py',85),
  ('for_init -> ID = expression : expression','for_init',5,'p_for_init','MParser.py',89),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_inst','MParser.py',93),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_inst','MParser.py',97),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','MParser.py',101),
  ('print_instr -> PRINT print_vars ;','print_instr',3,'p_print_instr','MParser.py',105),
  ('print_instr -> PRINT error ;','print_instr',3,'p_print_instr','MParser.py',106),
  ('print_vars -> print_vars , print_var','print_vars',3,'p_print_vars','MParser.py',110),
  ('print_vars -> print_var','print_vars',1,'p_print_vars','MParser.py',111),
  ('print_var -> STRING','print_var',1,'p_print_var','MParser.py',120),
  ('print_var -> expression','print_var',1,'p_print_var','MParser.py',121),
  ('instr_block -> { instructions }','instr_block',3,'p_complex_instr','MParser.py',125),
  ('number -> INT','number',1,'p_number_int','MParser.py',129),
  ('number -> FLOAT','number',1,'p_number_float','MParser.py',133),
  ('lvalue -> ID','lvalue',1,'p_lvalue','MParser.py',137),
  ('lvalue -> ID [ INT ]','lvalue',4,'p_lvalue','MParser.py',138),
  ('lvalue -> ID [ INT , INT ]','lvalue',6,'p_lvalue','MParser.py',139),
  ('assignment -> lvalue assign_op expression','assignment',3,'p_assignment','MParser.py',146),
  ('assign_op -> =','assign_op',1,'p_assign_op','MParser.py',150),
  ('assign_op -> PLUSASSIGN','assign_op',1,'p_assign_op','MParser.py',151),
  ('assign_op -> MINUSASSIGN','assign_op',1,'p_assign_op','MParser.py',152),
  ('assign_op -> MULASSIGN','assign_op',1,'p_assign_op','MParser.py',153),
  ('assign_op -> DIVASSIGN','assign_op',1,'p_assign_op','MParser.py',154),
  ('expression -> number','expression',1,'p_expression','MParser.py',158),
  ('expression -> lvalue','expression',1,'p_expression','MParser.py',159),
  ('expression -> matrix_init','expression',1,'p_expression','MParser.py',160),
  ('expression -> ( expression )','expression',3,'p_expression','MParser.py',161),
  ('expression -> - expression','expression',2,'p_expression','MParser.py',162),
  ("expression -> expression '",'expression',2,'p_expression','MParser.py',163),
  ('expression -> expression < expression','expression',3,'p_rel_op','MParser.py',172),
  ('expression -> expression > expression','expression',3,'p_rel_op','MParser.py',173),
  ('expression -> expression EQ expression','expression',3,'p_rel_op','MParser.py',174),
  ('expression -> expression NEQ expression','expression',3,'p_rel_op','MParser.py',175),
  ('expression -> expression LESSEQ expression','expression',3,'p_rel_op','MParser.py',176),
  ('expression -> expression MOREEQ expression','expression',3,'p_rel_op','MParser.py',177),
  ('expression -> expression + expression','expression',3,'p_num_op','MParser.py',181),
  ('expression -> expression - expression','expression',3,'p_num_op','MParser.py',182),
  ('expression -> expression * expression','expression',3,'p_num_op','MParser.py',183),
  ('expression -> expression / expression','expression',3,'p_num_op','MParser.py',184),
  ('expression -> expression DOTPLUS expression','expression',3,'p_dot_op','MParser.py',188),
  ('expression -> expression DOTMINUS expression','expression',3,'p_dot_op','MParser.py',189),
  ('expression -> expression DOTMUL expression','expression',3,'p_dot_op','MParser.py',190),
  ('expression -> expression DOTDIV expression','expression',3,'p_dot_op','MParser.py',191),
  ('matrix_init -> eye','matrix_init',1,'p_matrix_init','MParser.py',195),
  ('matrix_init -> ones','matrix_init',1,'p_matrix_init','MParser.py',196),
  ('matrix_init -> zeros','matrix_init',1,'p_matrix_init','MParser.py',197),
  ('matrix_init -> [ matrix_rows ]','matrix_init',3,'p_matrix_init','MParser.py',198),
  ('matrix_init -> [ scopes ]','matrix_init',3,'p_matrix_init','MParser.py',199),
  ('eye -> EYE ( expression )','eye',4,'p_eye','MParser.py',203),
  ('ones -> ONES ( expression )','ones',4,'p_ones','MParser.py',207),
  ('zeros -> ZEROS ( expression )','zeros',4,'p_zeros','MParser.py',211),
  ('matrix_rows -> matrix_rows ; row_elems','matrix_rows',3,'p_matrix_rows','MParser.py',215),
  ('matrix_rows -> row_elems','matrix_rows',1,'p_matrix_rows','MParser.py',216),
  ('row_elems -> row_elems , number','row_elems',3,'p_row_elems','MParser.py',225),
  ('row_elems -> number','row_elems',1,'p_row_elems','MParser.py',226),
  ('scopes -> scope','scopes',1,'p_scopes','MParser.py',235),
  ('scopes -> scopes ; scope','scopes',3,'p_scopes','MParser.py',236),
  ('scope -> INT : INT','scope',3,'p_scope','MParser.py',246),
  ('scope -> number : number : number','scope',5,'p_scope','MParser.py',247),
]
